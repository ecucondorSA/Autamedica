From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Autamedica Security Team <security@autamedica.com>
Date: Sun, 29 Sep 2025 00:00:00 +0000
Subject: [PATCH 1/6] feat: secure middleware with HttpOnly cookies and redirect whitelist

- Add HttpOnly, Secure, SameSite=Lax cookies
- Implement redirect whitelist to prevent open redirect attacks
- Improve error handling and session management
- Add comprehensive route protection

---
 apps/web-app/middleware.ts | 93 +++++++++++++++++++++++++++-----------
 1 file changed, 67 insertions(+), 26 deletions(-)

diff --git a/apps/web-app/middleware.ts b/apps/web-app/middleware.ts
index 1234567..abcdef0 100644
--- a/apps/web-app/middleware.ts
+++ b/apps/web-app/middleware.ts
@@ -1,32 +1,21 @@
-/**
- * Middleware de Next.js para autenticación y protección de rutas
- *
- * Este middleware intercepta todas las requests para:
- * - Verificar autenticación en rutas protegidas
- * - Redirigir usuarios no autenticados al login
- * - Manejar redirecciones post-login
- * - Actualizar cookies de sesión automáticamente
- */
-
-import { NextRequest, NextResponse } from "next/server";
-import { createServerClient } from "@supabase/ssr";
-import { ensureClientEnv } from "@autamedica/shared";
+import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
+import { NextResponse } from 'next/server'
+import type { NextRequest } from 'next/server'
+
+const ALLOWED_REDIRECTS = new Set([
+  '/',
+  '/dashboard',
+  '/profile',
+  '/auth/login',
+  '/auth/register',
+  '/auth/callback',
+  '/auth/select-role',
+  '/terms',
+  '/privacy'
+])

-// Rutas que requieren autenticación
 const PROTECTED_ROUTES = [
   "/dashboard",
   "/profile",
   "/admin",
   "/settings",
@@ -35,7 +24,15 @@ const PROTECTED_ROUTES = [
   "/doctors",
   "/companies",
-];
+]
+
+const PUBLIC_ROUTES = [
+  '/',
+  '/about',
+  '/contact',
+  '/terms',
+  '/privacy',
+  '/auth',
+  '/_next',
+  '/favicon.ico',
+  '/api/health'
+]

-// Rutas de autenticación (deben redirigir si ya está autenticado)
-const AUTH_ROUTES = ["/auth/login"];
+export async function middleware(req: NextRequest) {
+  const { pathname } = req.nextUrl
+
+  // Skip static files and public APIs
+  if (
+    pathname.startsWith('/_next/') ||
+    pathname.startsWith('/api/health') ||
+    pathname.includes('.') ||
+    PUBLIC_ROUTES.some(route => pathname.startsWith(route))
+  ) {
+    return NextResponse.next()
+  }
+
+  // Safe redirect validation
+  const returnTo = req.nextUrl.searchParams.get('returnTo') ?? '/'
+  const safeRedirect = ALLOWED_REDIRECTS.has(returnTo) ? returnTo : '/'
+
+  try {
+    const res = NextResponse.next()
+    const supabase = createMiddlewareClient({ req, res })
+
+    const { data: { session } } = await supabase.auth.getSession()
+
+    // Configure secure cookies
+    if (session?.access_token) {
+      res.cookies.set('am_session', session.access_token, {
+        httpOnly: true,
+        secure: process.env.NODE_ENV === 'production',
+        sameSite: 'lax',
+        path: '/',
+        maxAge: 60 * 60 * 24 * 7 // 7 days
+      })
+    }
+
+    const isAuthenticated = !!session
+    const isProtectedRoute = PROTECTED_ROUTES.some(route => pathname.startsWith(route))
+
+    // Redirect unauthenticated users from protected routes
+    if (!isAuthenticated && isProtectedRoute) {
+      return NextResponse.redirect(new URL(`/auth/login?returnTo=${safeRedirect}`, req.url))
+    }
+
+    // Redirect authenticated users from auth pages
+    if (isAuthenticated && pathname.startsWith('/auth/login')) {
+      return NextResponse.redirect(new URL(safeRedirect, req.url))
+    }
+
+    return res
+
+  } catch (error) {
+    console.error('Middleware auth error:', error)
+
+    if (PROTECTED_ROUTES.some(route => pathname.startsWith(route))) {
+      return NextResponse.redirect(new URL(`/auth/login?returnTo=${safeRedirect}`, req.url))
+    }
+
+    return NextResponse.next()
+  }
+}

-// Rutas públicas que no requieren verificación
-const PUBLIC_ROUTES = [
-  "/",
-  "/about",
-  "/contact",
-  "/terms",
-  "/privacy",
-  "/auth/callback",
-  "/auth/select-role",
-  "/_next",
-  "/favicon.ico",
-  "/api/health",
-];
+export const config = {
+  matcher: [
+    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
+  ],
+}
--
2.34.1