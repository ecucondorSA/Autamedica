#!/usr/bin/env node
import { chromium } from 'playwright';

async function main() {
  console.log('üè• Test simplificado de autenticaci√≥n...\n');

  const browser = await chromium.launch({
    headless: false,
    slowMo: 500
  });

  try {
    const context = await browser.newContext();
    const page = await context.newPage();

    // Capturar mensajes de consola para debugging
    page.on('console', msg => {
      const type = msg.type();
      if (type === 'error' || type === 'warning') {
        console.log(`[Browser ${type}]:`, msg.text());
      }
    });

    // Capturar errores de p√°gina
    page.on('pageerror', error => {
      console.log('[Page Error]:', error.message);
    });

    // Navegar directamente al dashboard de m√©dicos
    // La middleware deber√≠a redirigir a auth si no hay sesi√≥n
    console.log('üìç Navegando directamente a doctors dashboard...');
    await page.goto('http://localhost:3001/');

    // Esperar a que redirecte a auth
    await page.waitForTimeout(2000);
    console.log('üìç URL actual:', page.url());
    await page.screenshot({ path: '/tmp/test-1-redirected.png' });

    // Si estamos en la p√°gina de auth, hacer login
    if (page.url().includes('localhost:3005')) {
      console.log('‚úÖ Redirigido correctamente a auth');

      // Esperar a que la p√°gina cargue
      await page.waitForLoadState('networkidle');
      await page.screenshot({ path: '/tmp/test-2-auth-page.png' });

      // Si estamos en select-role, seleccionar m√©dico
      if (page.url().includes('select-role')) {
        console.log('üìã En p√°gina de selecci√≥n de rol, clickeando M√©dico...');
        await page.click('button:has-text("M√©dico"), div:has-text("M√©dico")');
        await page.waitForLoadState('networkidle');
        await page.waitForTimeout(1000);
        console.log('üìç URL despu√©s de seleccionar rol:', page.url());
      }

      // Ahora deber√≠amos estar en login
      console.log('üîê Llenando formulario de login...');
      await page.fill('input[type="email"]', 'doctor.test@autamedica.test');
      await page.fill('input[type="password"]', 'TestDoctor2025!');
      await page.screenshot({ path: '/tmp/test-3-filled-form.png' });

      // Submit
      await page.click('button[type="submit"]');
      console.log('‚úÖ Formulario enviado, esperando...');

      // Esperar navegaci√≥n
      await page.waitForTimeout(5000);
      await page.waitForLoadState('networkidle');

      console.log('üìç URL final:', page.url());
      await page.screenshot({ path: '/tmp/test-4-after-submit.png' });

      // Verificar si hay mensajes de error en la p√°gina
      const errorText = await page.textContent('body').catch(() => '');
      if (errorText.toLowerCase().includes('error')) {
        console.log('‚ö†Ô∏è  Posible error detectado en la p√°gina');
        // Buscar divs de error
        const errorDiv = await page.$('[class*="error"], [class*="Error"], .text-red');
        if (errorDiv) {
          const errorMsg = await errorDiv.textContent();
          console.log('‚ùå Mensaje de error:', errorMsg);
        }
      }

      // Verificar si llegamos al dashboard
      if (page.url().includes('localhost:3001')) {
        console.log('‚úÖ‚úÖ‚úÖ ¬°√âxito! Estamos en el dashboard de m√©dicos');

        // Buscar bot√≥n de c√°mara
        await page.waitForTimeout(2000);
        const cameraButton = await page.$('button:has-text("c√°mara")');
        if (cameraButton) {
          console.log('üìπ Bot√≥n de c√°mara encontrado!');
        } else {
          console.log('‚ö†Ô∏è  Bot√≥n de c√°mara no encontrado, pero estamos en el dashboard');
        }

        await page.screenshot({ path: '/tmp/test-5-dashboard.png', fullPage: true });
      } else {
        console.log('‚ùå No llegamos al dashboard, URL:', page.url());
      }
    }

    console.log('\n‚è≥ Manteniendo navegador abierto por 10 segundos...');
    await page.waitForTimeout(10000);

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    throw error;
  } finally {
    await browser.close();
  }
}

main().catch(console.error);
