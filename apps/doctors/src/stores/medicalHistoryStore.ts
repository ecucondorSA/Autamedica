/**
 * Store centralizado para el historial médico con sincronización automática
 */

import { create } from 'zustand'
import { subscribeWithSelector } from 'zustand/middleware'

export interface MedicalEntry {
  id: string
  type: 'diagnosis' | 'prescription' | 'vitals' | 'note' | 'analysis'
  content: string
  metadata?: {
    medication?: string
    dosage?: string
    frequency?: string
    duration?: string
    vitals?: {
      bloodPressure?: string
      heartRate?: number
      temperature?: number
      oxygenSaturation?: number
    }
    aiAnalysis?: {
      suggestions?: string[]
      riskFactors?: string[]
      confidence?: number
    }
  }
  timestamp: string
  doctorId: string
  patientId: string
  sessionId?: string
  autoGenerated?: boolean
}

interface MedicalHistoryState {
  entries: MedicalEntry[]
  isLoading: boolean
  lastSync: string | null

  // Actions
  addEntry: (entry: Omit<MedicalEntry, 'id' | 'timestamp'>) => Promise<void>
  updateEntry: (id: string, updates: Partial<MedicalEntry>) => Promise<void>
  deleteEntry: (id: string) => Promise<void>
  syncWithCentral: () => Promise<void>

  // AI-powered actions
  generateAISummary: (patientId: string) => Promise<string>
  suggestPrescriptions: (diagnosis: string) => Promise<string[]>
  analyzeVitals: (vitals: any) => Promise<string>
}

// Simular llamada a IA (en producción conectar con API real)
const simulateAICall = async <T>(data: T): Promise<T> => {
  await new Promise(resolve => setTimeout(resolve, 500))
  return data
}

export const useMedicalHistoryStore = create<MedicalHistoryState>()(
  subscribeWithSelector((set, get) => ({
    entries: [],
    isLoading: false,
    lastSync: null,

    addEntry: async (entry) => {
      const newEntry: MedicalEntry = {
        ...entry,
        id: crypto.randomUUID(),
        timestamp: new Date().toISOString()
      }

      set((state) => ({
        entries: [...state.entries, newEntry],
        lastSync: new Date().toISOString()
      }))

      // Sincronizar automáticamente con el servidor central
      await get().syncWithCentral()

      // Si es una prescripción o diagnóstico, generar análisis IA
      if (entry.type === 'diagnosis' || entry.type === 'prescription') {
        const aiAnalysis = await get().generateAISummary(entry.patientId)
        // logger.info('[AI Analysis]', aiAnalysis)
      }
    },

    updateEntry: async (id, updates) => {
      set((state) => ({
        entries: state.entries.map(e =>
          e.id === id ? { ...e, ...updates } : e
        ),
        lastSync: new Date().toISOString()
      }))

      await get().syncWithCentral()
    },

    deleteEntry: async (id) => {
      set((state) => ({
        entries: state.entries.filter(e => e.id !== id),
        lastSync: new Date().toISOString()
      }))

      await get().syncWithCentral()
    },

    syncWithCentral: async () => {
      set({ isLoading: true })

      try {
        // Simular sincronización con servidor central
        await new Promise(resolve => setTimeout(resolve, 300))

        // logger.info('[Medical History] Synced with central database')
        set({
          lastSync: new Date().toISOString(),
          isLoading: false
        })
      } catch (error) {
        logger.error('[Medical History] Sync failed:', error)
        set({ isLoading: false })
      }
    },

    generateAISummary: async (patientId) => {
      const entries = get().entries.filter(e => e.patientId === patientId)

      // Simular análisis IA
      const summary = await simulateAICall(
        `Resumen médico del paciente:
        - ${entries.filter(e => e.type === 'diagnosis').length} diagnósticos
        - ${entries.filter(e => e.type === 'prescription').length} prescripciones
        - Última consulta: ${entries[entries.length - 1]?.timestamp || 'N/A'}
        - Recomendación: Seguimiento en 2 semanas`
      )

      return summary
    },

    suggestPrescriptions: async (diagnosis) => {
      // Simular sugerencias de IA basadas en el diagnóstico
      const suggestions = await simulateAICall([
        'Ibuprofeno 400mg cada 8 horas',
        'Paracetamol 500mg cada 6 horas si hay fiebre',
        'Reposo relativo por 3 días',
        'Hidratación abundante'
      ])

      return suggestions
    },

    analyzeVitals: async (vitals) => {
      if (!vitals) return 'Sin datos de signos vitales'

      // Análisis básico de signos vitales
      let analysis = []

      if (vitals.heartRate) {
        if (vitals.heartRate < 60) analysis.push('Bradicardia detectada')
        if (vitals.heartRate > 100) analysis.push('Taquicardia detectada')
      }

      if (vitals.temperature) {
        if (vitals.temperature > 37.5) analysis.push('Fiebre presente')
        if (vitals.temperature < 35.5) analysis.push('Hipotermia')
      }

      if (vitals.oxygenSaturation && vitals.oxygenSaturation < 95) {
        analysis.push('Saturación de oxígeno baja')
      }

      const result = await simulateAICall(
        analysis.length > 0
          ? `⚠️ Alertas: ${analysis.join(', ')}`
          : '✅ Signos vitales dentro de parámetros normales'
      )

      return result
    }
  }))
)

// Middleware para auto-sincronización
useMedicalHistoryStore.subscribe(
  (state) => state.entries,
  (entries) => {
    // logger.info('[Medical History] Auto-sync triggered, entries:', entries.length)
  }
)