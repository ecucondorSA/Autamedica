{
  "version": 3,
  "sources": ["../../../src/http-api.js", "../../../src/worker.js", "../../../../../../../usr/local/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../usr/local/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-Z0HMp7/middleware-insertion-facade.js", "../../../../../../../usr/local/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-Z0HMp7/middleware-loader.entry.ts"],
  "sourceRoot": "/root/altamedica-reboot-fresh/apps/signaling-server/.wrangler/tmp/dev-o1Tshy",
  "sourcesContent": ["/**\n * HTTP API for signaling server using fetch and polling\n * More reliable than WebSockets for medical applications\n */\n\nexport class HttpSignalingAPI {\n  constructor() {\n    // Store rooms and messages in memory (in production, use KV or D1)\n    this.rooms = new Map() // roomId -> { users: Set, messages: Array }\n    this.userSessions = new Map() // userId -> { roomId, lastPing, userType }\n  }\n\n  async handleRequest(request, _env) {\n    const url = new URL(request.url)\n    const pathname = url.pathname\n    const method = request.method\n\n    // CORS headers for all responses\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Access-Control-Max-Age': '86400',\n    }\n\n    // Handle preflight OPTIONS requests\n    if (method === 'OPTIONS') {\n      return new Response(null, {\n        status: 200,\n        headers: corsHeaders\n      })\n    }\n\n    try {\n      // Health check\n      if (pathname === '/health') {\n        return this.jsonResponse({\n          status: 'ok',\n          time: new Date().toISOString(),\n          service: 'autamedica-http-signaling'\n        }, { headers: corsHeaders })\n      }\n\n      // Join room\n      if (pathname === '/api/join' && method === 'POST') {\n        return this.handleJoin(request, corsHeaders)\n      }\n\n      // Leave room\n      if (pathname === '/api/leave' && method === 'POST') {\n        return this.handleLeave(request, corsHeaders)\n      }\n\n      // Send message (offer, answer, ice-candidate)\n      if (pathname === '/api/message' && method === 'POST') {\n        return this.handleMessage(request, corsHeaders)\n      }\n\n      // Poll for messages\n      if (pathname === '/api/poll' && method === 'GET') {\n        return this.handlePoll(request, corsHeaders)\n      }\n\n      // Get room info\n      if (pathname === '/api/room' && method === 'GET') {\n        return this.handleRoomInfo(request, corsHeaders)\n      }\n\n      // Heartbeat/ping\n      if (pathname === '/api/ping' && method === 'POST') {\n        return this.handlePing(request, corsHeaders)\n      }\n\n      return this.jsonResponse({ error: 'Not found' }, {\n        status: 404,\n        headers: corsHeaders\n      })\n\n    } catch (error) {\n      console.error('HTTP API Error:', error)\n      return this.jsonResponse({\n        error: 'Internal server error',\n        details: error.message\n      }, {\n        status: 500,\n        headers: corsHeaders\n      })\n    }\n  }\n\n  async handleJoin(request, corsHeaders) {\n    const body = await request.json()\n    const { roomId, userId, userType } = body\n\n    if (!roomId || !userId || !userType) {\n      return this.jsonResponse({\n        error: 'Missing required fields: roomId, userId, userType'\n      }, { status: 400, headers: corsHeaders })\n    }\n\n    // Create room if it doesn't exist\n    if (!this.rooms.has(roomId)) {\n      this.rooms.set(roomId, {\n        users: new Set(),\n        messages: [],\n        pendingCalls: new Map() // Store pending calls for patients\n      })\n    }\n\n    const room = this.rooms.get(roomId)\n\n    // Add user to room\n    const userInfo = { userId, userType, joinedAt: Date.now() }\n    room.users.add(JSON.stringify(userInfo))\n\n    // Store user session\n    this.userSessions.set(userId, {\n      roomId,\n      userType,\n      lastPing: Date.now()\n    })\n\n    // Notify other users\n    const joinMessage = {\n      type: 'user-joined',\n      from: userId,\n      roomId,\n      data: { userType },\n      timestamp: Date.now()\n    }\n    room.messages.push(joinMessage)\n\n    // Check for pending calls for this patient\n    if (userType === 'patient' && room.pendingCalls) {\n      const pendingCall = room.pendingCalls.get('current')\n      if (pendingCall) {\n        console.log(`Delivering pending call to patient ${userId}`)\n        // Add pending call to messages so patient receives it immediately\n        room.messages.push({\n          ...pendingCall,\n          timestamp: Date.now() // Update timestamp to ensure it's received\n        })\n      }\n    }\n\n    // Get current room state\n    const users = Array.from(room.users).map(u => JSON.parse(u))\n\n    console.log(`User ${userId} joined room ${roomId} as ${userType}`)\n\n    return this.jsonResponse({\n      success: true,\n      roomState: {\n        users: users.filter(u => u.userId !== userId), // Exclude self\n        roomId\n      }\n    }, { headers: corsHeaders })\n  }\n\n  async handleLeave(request, corsHeaders) {\n    const body = await request.json()\n    const { roomId, userId } = body\n\n    if (!roomId || !userId) {\n      return this.jsonResponse({\n        error: 'Missing required fields: roomId, userId'\n      }, { status: 400, headers: corsHeaders })\n    }\n\n    const room = this.rooms.get(roomId)\n    if (!room) {\n      return this.jsonResponse({\n        error: 'Room not found'\n      }, { status: 404, headers: corsHeaders })\n    }\n\n    // Remove user from room\n    const userSession = this.userSessions.get(userId)\n    if (userSession) {\n      const userInfo = { userId, userType: userSession.userType, joinedAt: 0 }\n      room.users.delete(JSON.stringify(userInfo))\n      this.userSessions.delete(userId)\n\n      // Notify other users\n      const leaveMessage = {\n        type: 'user-left',\n        from: userId,\n        roomId,\n        data: { userType: userSession.userType },\n        timestamp: Date.now()\n      }\n      room.messages.push(leaveMessage)\n\n      console.log(`User ${userId} left room ${roomId}`)\n    }\n\n    return this.jsonResponse({\n      success: true\n    }, { headers: corsHeaders })\n  }\n\n  async handleMessage(request, corsHeaders) {\n    const body = await request.json()\n    const { roomId, from, to, type, data } = body\n\n    if (!roomId || !from || !type) {\n      return this.jsonResponse({\n        error: 'Missing required fields: roomId, from, type'\n      }, { status: 400, headers: corsHeaders })\n    }\n\n    const room = this.rooms.get(roomId)\n    if (!room) {\n      return this.jsonResponse({\n        error: 'Room not found'\n      }, { status: 404, headers: corsHeaders })\n    }\n\n    // Store the message\n    const message = {\n      type,\n      from,\n      to,\n      roomId,\n      data,\n      timestamp: Date.now()\n    }\n    room.messages.push(message)\n\n    // If it's an incoming call, store it as pending for patients who join later\n    if (type === 'incoming-call' && room.pendingCalls) {\n      console.log(`Storing pending call from ${from}`)\n      room.pendingCalls.set('current', message)\n    }\n\n    // If patient accepts or rejects call, clear pending call\n    if ((type === 'patient-joined' || type === 'call-rejected') && room.pendingCalls) {\n      console.log(`Clearing pending call`)\n      room.pendingCalls.delete('current')\n    }\n\n    // Keep only last 100 messages per room\n    if (room.messages.length > 100) {\n      room.messages = room.messages.slice(-100)\n    }\n\n    console.log(`Message ${type} from ${from} to ${to || 'all'} in room ${roomId}`)\n\n    return this.jsonResponse({\n      success: true,\n      messageId: message.timestamp\n    }, { headers: corsHeaders })\n  }\n\n  async handlePoll(request, corsHeaders) {\n    const url = new URL(request.url)\n    const roomId = url.searchParams.get('roomId')\n    const userId = url.searchParams.get('userId')\n    const since = parseInt(url.searchParams.get('since') || '0')\n\n    if (!roomId || !userId) {\n      return this.jsonResponse({\n        error: 'Missing required params: roomId, userId'\n      }, { status: 400, headers: corsHeaders })\n    }\n\n    const room = this.rooms.get(roomId)\n    if (!room) {\n      return this.jsonResponse({\n        messages: [],\n        timestamp: Date.now()\n      }, { headers: corsHeaders })\n    }\n\n    // Filter messages for this user since last poll\n    const messages = room.messages\n      .filter(msg => {\n        // Include messages after 'since' timestamp\n        if (msg.timestamp <= since) return false\n\n        // Don't send back user's own messages\n        if (msg.from === userId) return false\n\n        // If message has specific target, only send to that user\n        if (msg.to && msg.to !== userId) return false\n\n        return true\n      })\n      .slice(-20) // Limit to last 20 messages\n\n    return this.jsonResponse({\n      messages,\n      timestamp: Date.now()\n    }, { headers: corsHeaders })\n  }\n\n  async handleRoomInfo(request, corsHeaders) {\n    const url = new URL(request.url)\n    const roomId = url.searchParams.get('roomId')\n\n    if (!roomId) {\n      return this.jsonResponse({\n        error: 'Missing required param: roomId'\n      }, { status: 400, headers: corsHeaders })\n    }\n\n    const room = this.rooms.get(roomId)\n    if (!room) {\n      return this.jsonResponse({\n        roomId,\n        users: [],\n        exists: false\n      }, { headers: corsHeaders })\n    }\n\n    const users = Array.from(room.users).map(u => JSON.parse(u))\n\n    return this.jsonResponse({\n      roomId,\n      users,\n      exists: true,\n      messageCount: room.messages.length\n    }, { headers: corsHeaders })\n  }\n\n  async handlePing(request, corsHeaders) {\n    const body = await request.json()\n    const { userId } = body\n\n    if (!userId) {\n      return this.jsonResponse({\n        error: 'Missing required field: userId'\n      }, { status: 400, headers: corsHeaders })\n    }\n\n    const session = this.userSessions.get(userId)\n    if (session) {\n      session.lastPing = Date.now()\n    }\n\n    return this.jsonResponse({\n      success: true,\n      timestamp: Date.now()\n    }, { headers: corsHeaders })\n  }\n\n  jsonResponse(data, options = {}) {\n    const { status = 200, headers = {} } = options\n    return new Response(JSON.stringify(data), {\n      status,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers\n      }\n    })\n  }\n\n  // Cleanup inactive users (call periodically)\n  cleanup() {\n    const now = Date.now()\n    const timeout = 30000 // 30 seconds\n\n    for (const [userId, session] of this.userSessions) {\n      if (now - session.lastPing > timeout) {\n        console.log(`Cleaning up inactive user: ${userId}`)\n\n        const room = this.rooms.get(session.roomId)\n        if (room) {\n          const userInfo = { userId, userType: session.userType, joinedAt: 0 }\n          room.users.delete(JSON.stringify(userInfo))\n\n          // Notify others that user left\n          const leaveMessage = {\n            type: 'user-left',\n            from: userId,\n            roomId: session.roomId,\n            data: { userType: session.userType },\n            timestamp: now\n          }\n          room.messages.push(leaveMessage)\n        }\n\n        this.userSessions.delete(userId)\n      }\n    }\n  }\n}\n", "/**\n * Cloudflare Workers implementation of the signaling server\n * HTTP-based signaling using fetch and polling for better reliability\n */\n\nimport { HttpSignalingAPI } from './http-api.js'\n\n// Global instance of HTTP API\nconst httpApi = new HttpSignalingAPI()\n\nexport default {\n  async fetch(request, env, _ctx) {\n    const { pathname } = new URL(request.url)\n\n    // Handle all HTTP API routes\n    if (pathname.startsWith('/api/') || pathname === '/health') {\n      return await httpApi.handleRequest(request, env)\n    }\n\n    // Legacy WebSocket endpoint - return helpful message\n    if (pathname === '/signaling') {\n      return new Response(JSON.stringify({\n        error: 'WebSocket endpoint deprecated',\n        message: 'Please use HTTP API endpoints: /api/join, /api/poll, /api/message',\n        documentation: 'https://github.com/autamedica/signaling-server'\n      }), {\n        status: 410,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      })\n    }\n\n    // API documentation\n    if (pathname === '/') {\n      return new Response(`\n<!DOCTYPE html>\n<html>\n<head>\n    <title>AltaMedica Signaling Server - HTTP API</title>\n    <style>body{font-family:Arial,sans-serif;margin:40px;}</style>\n</head>\n<body>\n    <h1>\uD83C\uDFE5 AltaMedica Signaling Server</h1>\n    <p><strong>Status:</strong> \u2705 Active</p>\n    <p><strong>Mode:</strong> HTTP API with polling</p>\n\n    <h2>\uD83D\uDCE1 API Endpoints</h2>\n    <ul>\n        <li><code>GET /health</code> - Server health check</li>\n        <li><code>POST /api/join</code> - Join a room</li>\n        <li><code>POST /api/leave</code> - Leave a room</li>\n        <li><code>POST /api/message</code> - Send WebRTC message</li>\n        <li><code>GET /api/poll</code> - Poll for new messages</li>\n        <li><code>GET /api/room</code> - Get room information</li>\n        <li><code>POST /api/ping</code> - Heartbeat/keep-alive</li>\n    </ul>\n\n    <h2>\uD83D\uDD2C Test</h2>\n    <p><a href=\"/test-websocket.html\">WebSocket Test Page</a></p>\n\n    <h2>\uD83D\uDCDA Integration</h2>\n    <p>Use the <code>@autamedica/telemedicine</code> package for easy integration.</p>\n</body>\n</html>\n    `, {\n        headers: { 'Content-Type': 'text/html' }\n      })\n    }\n\n    return new Response('Not Found', { status: 404 })\n  },\n\n  // Optional: Schedule periodic cleanup\n  async scheduled(_controller, _env, ctx) {\n    ctx.waitUntil(httpApi.cleanup())\n  }\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/root/altamedica-reboot-fresh/apps/signaling-server/src/worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/usr/local/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/usr/local/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/root/altamedica-reboot-fresh/apps/signaling-server/src/worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/root/altamedica-reboot-fresh/apps/signaling-server/.wrangler/tmp/bundle-Z0HMp7/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/usr/local/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/root/altamedica-reboot-fresh/apps/signaling-server/.wrangler/tmp/bundle-Z0HMp7/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/root/altamedica-reboot-fresh/apps/signaling-server/.wrangler/tmp/bundle-Z0HMp7/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
