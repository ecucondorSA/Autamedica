{
  "actions": [
    {
      "action": "review",
      "module": "undici",
      "resolves": [
        {
          "id": 1101610,
          "path": ".>vercel>@vercel/node>undici",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1104501,
          "path": ".>vercel>@vercel/node>undici",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "path-to-regexp",
      "resolves": [
        {
          "id": 1101846,
          "path": ".>vercel>@vercel/node>path-to-regexp",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "esbuild",
      "resolves": [
        {
          "id": 1102341,
          "path": ".>@cloudflare/next-on-pages>esbuild",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1102341,
          "path": ".>vercel>@vercel/node>esbuild",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    },
    {
      "action": "review",
      "module": "cookie",
      "resolves": [
        {
          "id": 1103907,
          "path": ".>@cloudflare/next-on-pages>cookie",
          "dev": false,
          "optional": false,
          "bundled": false
        },
        {
          "id": 1103907,
          "path": "apps__auth>next-cookies>universal-cookie>cookie",
          "dev": false,
          "optional": false,
          "bundled": false
        }
      ]
    }
  ],
  "advisories": {
    "1101610": {
      "findings": [
        {
          "version": "5.28.4",
          "paths": []
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/nodejs/undici/security/advisories/GHSA-c76h-2ccp-4975\n- https://nvd.nist.gov/vuln/detail/CVE-2025-22150\n- https://github.com/nodejs/undici/commit/711e20772764c29f6622ddc937c63b6eefdf07d0\n- https://github.com/nodejs/undici/commit/c2d78cd19fe4f4c621424491e26ce299e65e934a\n- https://github.com/nodejs/undici/commit/c3acc6050b781b827d80c86cbbab34f14458d385\n- https://hackerone.com/reports/2913312\n- https://blog.securityevaluators.com/hacking-the-javascript-lottery-80cc437e3b7f\n- https://github.com/nodejs/undici/blob/8b06b8250907d92fead664b3368f1d2aa27c1f35/lib/web/fetch/body.js#L113\n- https://github.com/advisories/GHSA-c76h-2ccp-4975",
      "created": "2025-01-21T21:10:47.000Z",
      "id": 1101610,
      "npm_advisory_id": null,
      "overview": "### Impact\n\n[Undici `fetch()` uses Math.random()](https://github.com/nodejs/undici/blob/8b06b8250907d92fead664b3368f1d2aa27c1f35/lib/web/fetch/body.js#L113) to choose the boundary for a multipart/form-data request. It is known that the output of Math.random() can be predicted if several of its generated values are known.\n\nIf there is a mechanism in an app that sends multipart requests to an attacker-controlled website, they can use this to leak the necessary values. Therefore, An attacker can tamper with the requests going to the backend APIs if certain conditions are met.\n\n### Patches\n\nThis is fixed in 5.28.5; 6.21.1; 7.2.3.\n\n### Workarounds\n\nDo not issue multipart requests to attacker controlled servers.\n\n### References\n\n* https://hackerone.com/reports/2913312\n* https://blog.securityevaluators.com/hacking-the-javascript-lottery-80cc437e3b7f\n",
      "reported_by": null,
      "title": "Use of Insufficiently Random Values in undici",
      "metadata": null,
      "cves": [
        "CVE-2025-22150"
      ],
      "access": "public",
      "severity": "moderate",
      "module_name": "undici",
      "vulnerable_versions": ">=4.5.0 <5.28.5",
      "github_advisory_id": "GHSA-c76h-2ccp-4975",
      "recommendation": "Upgrade to version 5.28.5 or later",
      "patched_versions": ">=5.28.5",
      "updated": "2025-01-22T08:01:28.000Z",
      "cvss": {
        "score": 6.8,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N"
      },
      "cwe": [
        "CWE-330"
      ],
      "url": "https://github.com/advisories/GHSA-c76h-2ccp-4975"
    },
    "1101846": {
      "findings": [
        {
          "version": "6.1.0",
          "paths": [
            ". > @cloudflare/next-on-pages@1.13.16 > vercel@48.1.6 > @vercel/express@0.0.22 > @vercel/node@5.3.24 > path-to-regexp@6.1.0",
            ". > @cloudflare/next-on-pages@1.13.16 > vercel@48.1.6 > @vercel/h3@0.1.2 > @vercel/node@5.3.24 > path-to-regexp@6.1.0",
            ". > @cloudflare/next-on-pages@1.13.16 > vercel@48.1.6 > @vercel/hono@0.1.2 > @vercel/node@5.3.24 > path-to-regexp@6.1.0",
            ". > @cloudflare/next-on-pages@1.13.16 > vercel@48.1.6 > @vercel/node@5.3.24 > path-to-regexp@6.1.0",
            ". > @cloudflare/next-on-pages@1.13.16 > vercel@48.1.6 > @vercel/remix-builder@5.4.12 > path-to-regexp@6.1.0",
            ". > vercel@48.1.6 > @vercel/express@0.0.22 > @vercel/node@5.3.24 > path-to-regexp@6.1.0",
            ". > vercel@48.1.6 > @vercel/h3@0.1.2 > @vercel/node@5.3.24 > path-to-regexp@6.1.0",
            ". > vercel@48.1.6 > @vercel/hono@0.1.2 > @vercel/node@5.3.24 > path-to-regexp@6.1.0",
            ". > vercel@48.1.6 > @vercel/node@5.3.24 > path-to-regexp@6.1.0",
            ". > vercel@48.1.6 > @vercel/remix-builder@5.4.12 > path-to-regexp@6.1.0"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j\n- https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f\n- https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6\n- https://nvd.nist.gov/vuln/detail/CVE-2024-45296\n- https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485\n- https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef\n- https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894\n- https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0\n- https://security.netapp.com/advisory/ntap-20250124-0001\n- https://github.com/advisories/GHSA-9wv6-86v2-598j",
      "created": "2024-09-09T20:19:15.000Z",
      "id": 1101846,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nA bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (`.`). For example, `/:a-:b`.\n\n### Patches\n\nFor users of 0.1, upgrade to `0.1.10`. All other users should upgrade to `8.0.0`.\n\nThese versions add backtrack protection when a custom regex pattern is not provided:\n\n- [0.1.10](https://github.com/pillarjs/path-to-regexp/releases/tag/v0.1.10)\n- [1.9.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v1.9.0)\n- [3.3.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v3.3.0)\n- [6.3.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0)\n\nThey do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.\n\nVersion [7.1.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0) can enable `strict: true` and get an error when the regular expression might be bad.\n\nVersion [8.0.0](https://github.com/pillarjs/path-to-regexp/releases/tag/v8.0.0) removes the features that can cause a ReDoS.\n\n### Workarounds\n\nAll versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change `/:a-:b` to `/:a-:b([^-/]+)`.\n\nIf paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.\n\n### Details\n\nUsing `/:a-:b` will produce the regular expression `/^\\/([^\\/]+?)-([^\\/]+?)\\/?$/`. This can be exploited by a path such as `/a${'-a'.repeat(8_000)}/a`. [OWASP](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS) has a good example of why this occurs, but the TL;DR is the `/a` at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the `:a-:b` on the repeated 8,000 `-a`.\n\nBecause JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.\n\n### References\n\n* [OWASP](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)\n* [Detailed blog post](https://blakeembrey.com/posts/2024-09-web-redos/)",
      "reported_by": null,
      "title": "path-to-regexp outputs backtracking regular expressions",
      "metadata": null,
      "cves": [
        "CVE-2024-45296"
      ],
      "access": "public",
      "severity": "high",
      "module_name": "path-to-regexp",
      "vulnerable_versions": ">=4.0.0 <6.3.0",
      "github_advisory_id": "GHSA-9wv6-86v2-598j",
      "recommendation": "Upgrade to version 6.3.0 or later",
      "patched_versions": ">=6.3.0",
      "updated": "2025-01-24T21:32:30.000Z",
      "cvss": {
        "score": 7.5,
        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"
      },
      "cwe": [
        "CWE-1333"
      ],
      "url": "https://github.com/advisories/GHSA-9wv6-86v2-598j"
    },
    "1102341": {
      "findings": [
        {
          "version": "0.15.18",
          "paths": []
        },
        {
          "version": "0.14.47",
          "paths": []
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/evanw/esbuild/security/advisories/GHSA-67mh-4wv8-2f99\n- https://github.com/evanw/esbuild/commit/de85afd65edec9ebc44a11e245fd9e9a2e99760d\n- https://github.com/advisories/GHSA-67mh-4wv8-2f99",
      "created": "2025-02-10T17:48:07.000Z",
      "id": 1102341,
      "npm_advisory_id": null,
      "overview": "### Summary\n\nesbuild allows any websites to send any request to the development server and read the response due to default CORS settings.\n\n### Details\n\nesbuild sets `Access-Control-Allow-Origin: *` header to all requests, including the SSE connection, which allows any websites to send any request to the development server and read the response.\n\nhttps://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L121\nhttps://github.com/evanw/esbuild/blob/df815ac27b84f8b34374c9182a93c94718f8a630/pkg/api/serve_other.go#L363\n\n**Attack scenario**:\n\n1. The attacker serves a malicious web page (`http://malicious.example.com`).\n1. The user accesses the malicious web page.\n1. The attacker sends a `fetch('http://127.0.0.1:8000/main.js')` request by JS in that malicious web page. This request is normally blocked by same-origin policy, but that's not the case for the reasons above.\n1. The attacker gets the content of `http://127.0.0.1:8000/main.js`.\n\nIn this scenario, I assumed that the attacker knows the URL of the bundle output file name. But the attacker can also get that information by\n\n- Fetching `/index.html`: normally you have a script tag here\n- Fetching `/assets`: it's common to have a `assets` directory when you have JS files and CSS files in a different directory and the directory listing feature tells the attacker the list of files\n- Connecting `/esbuild` SSE endpoint: the SSE endpoint sends the URL path of the changed files when the file is changed (`new EventSource('/esbuild').addEventListener('change', e => console.log(e.type, e.data))`)\n- Fetching URLs in the known file: once the attacker knows one file, the attacker can know the URLs imported from that file\n\nThe scenario above fetches the compiled content, but if the victim has the source map option enabled, the attacker can also get the non-compiled content by fetching the source map file.\n\n### PoC\n\n1. Download [reproduction.zip](https://github.com/user-attachments/files/18561484/reproduction.zip)\n2. Extract it and move to that directory\n1. Run `npm i`\n1. Run `npm run watch`\n1. Run `fetch('http://127.0.0.1:8000/app.js').then(r => r.text()).then(content => console.log(content))` in a different website's dev tools.\n\n![image](https://github.com/user-attachments/assets/08fc2e4d-e1ec-44ca-b0ea-78a73c3c40e9)\n\n### Impact\n\nUsers using the serve feature may get the source code stolen by malicious websites.",
      "reported_by": null,
      "title": "esbuild enables any website to send any requests to the development server and read the response",
      "metadata": null,
      "cves": [],
      "access": "public",
      "severity": "moderate",
      "module_name": "esbuild",
      "vulnerable_versions": "<=0.24.2",
      "github_advisory_id": "GHSA-67mh-4wv8-2f99",
      "recommendation": "Upgrade to version 0.25.0 or later",
      "patched_versions": ">=0.25.0",
      "updated": "2025-02-10T17:48:08.000Z",
      "cvss": {
        "score": 5.3,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:N/A:N"
      },
      "cwe": [
        "CWE-346"
      ],
      "url": "https://github.com/advisories/GHSA-67mh-4wv8-2f99"
    },
    "1103907": {
      "findings": [
        {
          "version": "0.5.0",
          "paths": [
            ". > @cloudflare/next-on-pages@1.13.16 > cookie@0.5.0"
          ]
        },
        {
          "version": "0.4.2",
          "paths": [
            "apps/auth > next-cookies@2.0.3 > universal-cookie@4.0.4 > cookie@0.4.2"
          ]
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/jshttp/cookie/security/advisories/GHSA-pxg6-pf52-xh8x\n- https://github.com/jshttp/cookie/pull/167\n- https://github.com/jshttp/cookie/commit/e10042845354fea83bd8f34af72475eed1dadf5c\n- https://github.com/advisories/GHSA-pxg6-pf52-xh8x",
      "created": "2024-10-04T20:31:00.000Z",
      "id": 1103907,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nThe cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, `serialize(\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a\", value)` would result in `\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a=test\"`, setting `userName` cookie to `<script>` and ignoring `value`.\n\nA similar escape can be used for `path` and `domain`, which could be abused to alter other fields of the cookie.\n\n### Patches\n\nUpgrade to 0.7.0, which updates the validation for `name`, `path`, and `domain`.\n\n### Workarounds\n\nAvoid passing untrusted or arbitrary values for these fields, ensure they are set by the application instead of user input.\n\n### References\n\n* https://github.com/jshttp/cookie/pull/167",
      "reported_by": null,
      "title": "cookie accepts cookie name, path, and domain with out of bounds characters",
      "metadata": null,
      "cves": [
        "CVE-2024-47764"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "cookie",
      "vulnerable_versions": "<0.7.0",
      "github_advisory_id": "GHSA-pxg6-pf52-xh8x",
      "recommendation": "Upgrade to version 0.7.0 or later",
      "patched_versions": ">=0.7.0",
      "updated": "2025-04-15T13:56:44.000Z",
      "cvss": {
        "score": 0,
        "vectorString": null
      },
      "cwe": [
        "CWE-74"
      ],
      "url": "https://github.com/advisories/GHSA-pxg6-pf52-xh8x"
    },
    "1104501": {
      "findings": [
        {
          "version": "5.28.4",
          "paths": []
        }
      ],
      "found_by": null,
      "deleted": null,
      "references": "- https://github.com/nodejs/undici/security/advisories/GHSA-cxrh-j4jr-qwg3\n- https://github.com/nodejs/undici/issues/3895\n- https://github.com/nodejs/undici/pull/4088\n- https://nvd.nist.gov/vuln/detail/CVE-2025-47279\n- https://github.com/advisories/GHSA-cxrh-j4jr-qwg3",
      "created": "2025-05-15T14:15:06.000Z",
      "id": 1104501,
      "npm_advisory_id": null,
      "overview": "### Impact\n\nApplications that use undici to implement a webhook-like system are vulnerable. If the attacker set up a server with an invalid certificate, and they can force the application to call the webhook repeatedly, then they can cause a memory leak. \n\n### Patches\n\nThis has been patched in https://github.com/nodejs/undici/pull/4088.\n\n### Workarounds\n\nIf a webhook fails, avoid keep calling it repeatedly.\n\n### References\n\nReported as: https://github.com/nodejs/undici/issues/3895",
      "reported_by": null,
      "title": "undici Denial of Service attack via bad certificate data",
      "metadata": null,
      "cves": [
        "CVE-2025-47279"
      ],
      "access": "public",
      "severity": "low",
      "module_name": "undici",
      "vulnerable_versions": "<5.29.0",
      "github_advisory_id": "GHSA-cxrh-j4jr-qwg3",
      "recommendation": "Upgrade to version 5.29.0 or later",
      "patched_versions": ">=5.29.0",
      "updated": "2025-05-16T02:07:01.000Z",
      "cvss": {
        "score": 3.1,
        "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L"
      },
      "cwe": [
        "CWE-401"
      ],
      "url": "https://github.com/advisories/GHSA-cxrh-j4jr-qwg3"
    }
  },
  "muted": [],
  "metadata": {
    "vulnerabilities": {
      "info": 0,
      "low": 3,
      "moderate": 3,
      "high": 1,
      "critical": 0
    },
    "dependencies": 1639,
    "devDependencies": 0,
    "optionalDependencies": 0,
    "totalDependencies": 1639
  }
}
