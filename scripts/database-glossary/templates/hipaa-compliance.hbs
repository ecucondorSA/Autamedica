# üîê Reporte de Cumplimiento HIPAA - Base de Datos AutaMedica

**üìä An√°lisis Automatizado de Protecci√≥n de Informaci√≥n M√©dica**

---

## üìã Resumen Ejecutivo

| **M√©trica** | **Valor** | **Estado** |
|-------------|-----------|------------|
| **Tablas Analizadas** | {{hipaa_summary.total_tables_reviewed}} | {{#ifGreaterThan hipaa_summary.total_tables_reviewed 0}}‚úÖ{{else}}‚ö†Ô∏è{{/if}} |
| **Tablas con PHI** | {{hipaa_summary.phi_containing_tables}} | {{#ifGreaterThan hipaa_summary.phi_containing_tables 0}}üîí{{else}}‚úÖ{{/if}} |
| **Columnas Alta Sensibilidad** | {{hipaa_summary.high_sensitivity_columns}} | {{#ifGreaterThan hipaa_summary.high_sensitivity_columns 0}}‚ö†Ô∏è{{else}}‚úÖ{{/if}} |
| **Brechas Cr√≠ticas** | {{#each hipaa_summary.compliance_gaps}}{{#ifEquals severity "CRITICAL"}}{{add @index 1}}{{/ifEquals}}{{/each}} | {{#ifGreaterThan (length hipaa_summary.compliance_gaps) 0}}‚ùå{{else}}‚úÖ{{/if}} |
| **Cobertura de Encriptaci√≥n** | {{percentage (length hipaa_summary.encryption_requirements) hipaa_summary.phi_containing_tables}} | {{#ifGreaterThan (percentage (length hipaa_summary.encryption_requirements) hipaa_summary.phi_containing_tables) 90}}‚úÖ{{else}}‚ö†Ô∏è{{/if}} |

---

## üõ°Ô∏è Estado de Control de Acceso

### üìä Distribuci√≥n de Protecciones

| **Tipo de Control** | **Cantidad** | **Porcentaje** |
|---------------------|--------------|----------------|
| üîê **RLS Habilitado** | {{hipaa_summary.access_control_summary.rls_enabled_tables}} | {{percentage hipaa_summary.access_control_summary.rls_enabled_tables hipaa_summary.total_tables_reviewed}} |
| üë§ **Basado en Roles** | {{hipaa_summary.access_control_summary.role_based_tables}} | {{percentage hipaa_summary.access_control_summary.role_based_tables hipaa_summary.total_tables_reviewed}} |
| üåê **Acceso P√∫blico** | {{hipaa_summary.access_control_summary.public_access_tables}} | {{percentage hipaa_summary.access_control_summary.public_access_tables hipaa_summary.total_tables_reviewed}} |
| ‚ö†Ô∏è **Sin Control** | {{hipaa_summary.access_control_summary.uncontrolled_access_tables}} | {{percentage hipaa_summary.access_control_summary.uncontrolled_access_tables hipaa_summary.total_tables_reviewed}} |

{{#ifGreaterThan hipaa_summary.access_control_summary.uncontrolled_access_tables 0}}
{{alert "error" "Existen tablas sin control de acceso adecuado. Esto representa un riesgo de cumplimiento HIPAA."}}
{{/ifGreaterThan}}

{{#ifGreaterThan hipaa_summary.access_control_summary.public_access_tables 5}}
{{alert "warning" "Alto n√∫mero de tablas con acceso p√∫blico. Verificar que no contengan PHI."}}
{{/ifGreaterThan}}

---

## üö® Brechas de Cumplimiento

{{#if hipaa_summary.compliance_gaps}}
{{#each hipaa_summary.compliance_gaps}}
### {{securityIcon severity}} {{gap_type}} - {{upperCase severity}}

**Descripci√≥n**: {{recommendation}}

{{#if regulatory_reference}}
**üìö Base Regulatoria**: {{regulatory_reference}}
{{/if}}

#### üìã Objetos Afectados

{{#if affected_tables}}
**Tablas**:
{{#each affected_tables}}
- `{{this}}`
{{/each}}
{{/if}}

{{#if affected_columns}}
**Columnas**:
{{#each affected_columns}}
- `{{this}}`
{{/each}}
{{/if}}

#### üîß Plan de Remediaci√≥n

{{#ifEquals gap_type "MISSING_ENCRYPTION"}}
1. **Implementar encriptaci√≥n a nivel de columna** para datos PHI
2. **Configurar gesti√≥n de claves** apropiada
3. **Actualizar pol√≠ticas de acceso** para requerir desencriptaci√≥n autorizada
4. **Documentar procedimientos** de manejo de claves

**C√≥digo de Ejemplo**:
```sql
-- Habilitar encriptaci√≥n para columnas sensibles
ALTER TABLE {{first affected_tables}}
ALTER COLUMN sensitive_column
SET DATA TYPE bytea USING pgp_sym_encrypt(sensitive_column::text, 'encryption_key');

-- Crear funci√≥n de acceso controlado
CREATE OR REPLACE FUNCTION get_decrypted_data(encrypted_data bytea)
RETURNS text
SECURITY DEFINER
LANGUAGE plpgsql
AS $$
BEGIN
  -- Verificar permisos antes de desencriptar
  IF NOT has_role_permission(current_user, 'PHI_ACCESS') THEN
    RAISE EXCEPTION 'Acceso no autorizado a datos PHI';
  END IF;

  RETURN pgp_sym_decrypt(encrypted_data, 'encryption_key');
END;
$$;
```
{{/ifEquals}}

{{#ifEquals gap_type "INSUFFICIENT_ACCESS_CONTROL"}}
1. **Implementar Row Level Security (RLS)** en tablas afectadas
2. **Crear pol√≠ticas de acceso** basadas en roles m√©dicos
3. **Configurar auditor√≠a** de accesos a datos PHI
4. **Establecer autenticaci√≥n multifactor** para acceso a datos sensibles

**C√≥digo de Ejemplo**:
```sql
-- Habilitar RLS
ALTER TABLE {{first affected_tables}} ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para doctores - solo sus pacientes
CREATE POLICY doctor_patient_access ON {{first affected_tables}}
FOR ALL TO doctor_role
USING (
  doctor_id = auth.get_current_doctor_id() OR
  EXISTS (
    SELECT 1 FROM patient_care_team pct
    WHERE pct.patient_id = {{first affected_tables}}.patient_id
    AND pct.doctor_id = auth.get_current_doctor_id()
  )
);

-- Pol√≠tica para pacientes - solo sus propios datos
CREATE POLICY patient_self_access ON {{first affected_tables}}
FOR ALL TO patient_role
USING (patient_id = auth.get_current_patient_id());
```
{{/ifEquals}}

{{#ifEquals gap_type "NO_AUDIT_TRAIL"}}
1. **Implementar auditor√≠a autom√°tica** de accesos y modificaciones
2. **Crear triggers de auditor√≠a** para cambios en datos PHI
3. **Establecer retenci√≥n** de logs de auditor√≠a por 6 a√±os m√≠nimo
4. **Configurar alertas** para accesos sospechosos

**C√≥digo de Ejemplo**:
```sql
-- Crear tabla de auditor√≠a
CREATE TABLE audit_log (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  table_name text NOT NULL,
  operation text NOT NULL,
  user_id uuid,
  user_role text,
  old_values jsonb,
  new_values jsonb,
  accessed_at timestamptz DEFAULT now(),
  ip_address inet,
  user_agent text
);

-- Funci√≥n de auditor√≠a
CREATE OR REPLACE FUNCTION audit_trigger_function()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO audit_log (
    table_name, operation, user_id, user_role,
    old_values, new_values, ip_address
  ) VALUES (
    TG_TABLE_NAME, TG_OP, auth.uid(), auth.get_user_role(),
    CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN to_jsonb(OLD) END,
    CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN to_jsonb(NEW) END,
    inet_client_addr()
  );

  RETURN COALESCE(NEW, OLD);
END;
$$;

-- Aplicar trigger a tabla sensible
CREATE TRIGGER audit_{{first affected_tables}}_trigger
AFTER INSERT OR UPDATE OR DELETE ON {{first affected_tables}}
FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();
```
{{/ifEquals}}

{{#ifEquals gap_type "UNCLEAR_RETENTION"}}
1. **Definir pol√≠ticas de retenci√≥n** espec√≠ficas por tipo de dato m√©dico
2. **Implementar eliminaci√≥n autom√°tica** de datos expirados
3. **Crear proceso de anonimizaci√≥n** para datos de investigaci√≥n
4. **Documentar excepciones** de retenci√≥n legal

**C√≥digo de Ejemplo**:
```sql
-- Funci√≥n de limpieza autom√°tica
CREATE OR REPLACE FUNCTION cleanup_expired_data()
RETURNS void
LANGUAGE plpgsql
AS $$
BEGIN
  -- PHI general: 6 a√±os despu√©s del √∫ltimo acceso
  DELETE FROM {{first affected_tables}}
  WHERE last_accessed < NOW() - INTERVAL '6 years'
  AND NOT legal_hold;

  -- Datos psiqui√°tricos: retenci√≥n especial
  DELETE FROM psychiatric_records
  WHERE created_at < NOW() - INTERVAL '10 years'
  AND patient_consent_expired;

  -- Log de eliminaciones para auditor√≠a
  INSERT INTO data_retention_log (
    table_name, records_deleted, deletion_reason, deleted_at
  ) VALUES (
    '{{first affected_tables}}', ROW_COUNT, 'Automatic retention cleanup', NOW()
  );
END;
$$;

-- Programar limpieza mensual
SELECT cron.schedule('cleanup-phi-data', '0 2 1 * *', 'SELECT cleanup_expired_data();');
```
{{/ifEquals}}

{{#ifEquals gap_type "UNCLASSIFIED_PHI"}}
1. **Revisar manualmente** columnas sin clasificar
2. **Aplicar etiquetas HIPAA** apropiadas
3. **Actualizar documentaci√≥n** de tipos de datos
4. **Entrenar equipo** en clasificaci√≥n de PHI

**Proceso de Clasificaci√≥n**:
1. Identificar tipo de informaci√≥n m√©dica
2. Determinar nivel de sensibilidad
3. Aplicar controles de acceso apropiados
4. Documentar decisiones de clasificaci√≥n
{{/ifEquals}}

---

{{/each}}
{{else}}
‚úÖ **No se detectaron brechas de cumplimiento cr√≠ticas**

Todas las tablas analizadas cumplen con los requisitos b√°sicos de HIPAA.
{{/if}}

---

## üîí Requisitos de Encriptaci√≥n

{{#if hipaa_summary.encryption_requirements}}
{{#each hipaa_summary.encryption_requirements}}
### üõ°Ô∏è {{table_name}}

| **Aspecto** | **Configuraci√≥n** |
|-------------|-------------------|
| **Columnas Afectadas** | {{join columns ", "}} |
| **Tipo de Encriptaci√≥n** | {{encryption_type}} |
| **Gesti√≥n de Claves** | {{key_management}} |
| **Justificaci√≥n** | {{compliance_driver}} |

{{#ifEquals encryption_type "COLUMN_LEVEL"}}
**Implementaci√≥n Recomendada**:
```sql
-- Encriptaci√≥n a nivel de columna usando pgcrypto
ALTER TABLE {{table_name}}
ADD COLUMN {{first columns}}_encrypted bytea;

UPDATE {{table_name}}
SET {{first columns}}_encrypted = pgp_sym_encrypt({{first columns}}::text, 'master_key');

ALTER TABLE {{table_name}}
DROP COLUMN {{first columns}};

ALTER TABLE {{table_name}}
RENAME COLUMN {{first columns}}_encrypted TO {{first columns}};
```
{{/ifEquals}}

{{#ifEquals encryption_type "ROW_LEVEL"}}
**Implementaci√≥n Recomendada**:
```sql
-- Encriptaci√≥n a nivel de fila
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- Funci√≥n para encriptar fila completa
CREATE OR REPLACE FUNCTION encrypt_phi_row(data jsonb, key_id text)
RETURNS bytea
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN pgp_sym_encrypt(data::text, get_encryption_key(key_id));
END;
$$;
```
{{/ifEquals}}

---

{{/each}}
{{else}}
‚ÑπÔ∏è **No se requiere encriptaci√≥n adicional** seg√∫n el an√°lisis actual.
{{/if}}

---

## üìä Requisitos de Auditor√≠a

{{#if hipaa_summary.audit_requirements}}
{{#each hipaa_summary.audit_requirements}}
### üìã {{table_name}} - {{upperCase audit_level}}

| **Configuraci√≥n** | **Valor** |
|-------------------|-----------|
| **Nivel de Auditor√≠a** | {{audit_level}} |
| **Eventos a Auditar** | {{join events_to_audit ", "}} |
| **Per√≠odo de Retenci√≥n** | {{retention_period}} |
| **Base de Cumplimiento** | {{compliance_basis}} |

{{#ifEquals audit_level "COMPREHENSIVE"}}
**Configuraci√≥n de Auditor√≠a Completa**:
```sql
-- Auditor√≠a comprensiva con detalles completos
CREATE TRIGGER comprehensive_audit_{{table_name}}
AFTER INSERT OR UPDATE OR DELETE ON {{table_name}}
FOR EACH ROW EXECUTE FUNCTION comprehensive_audit_function();

-- Funci√≥n de auditor√≠a comprensiva
CREATE OR REPLACE FUNCTION comprehensive_audit_function()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO comprehensive_audit_log (
    table_name, operation, user_id, user_role, session_id,
    old_values, new_values, changed_columns,
    access_timestamp, ip_address, user_agent,
    application_name, database_user, transaction_id
  ) VALUES (
    TG_TABLE_NAME, TG_OP, auth.uid(), auth.get_user_role(), auth.get_session_id(),
    CASE WHEN TG_OP IN ('UPDATE', 'DELETE') THEN to_jsonb(OLD) END,
    CASE WHEN TG_OP IN ('INSERT', 'UPDATE') THEN to_jsonb(NEW) END,
    CASE WHEN TG_OP = 'UPDATE' THEN get_changed_columns(OLD, NEW) END,
    NOW(), inet_client_addr(), current_setting('application_name'),
    current_user, txid_current()
  );

  RETURN COALESCE(NEW, OLD);
END;
$$;
```
{{/ifEquals}}

---

{{/each}}
{{else}}
‚ÑπÔ∏è **Auditor√≠a b√°sica suficiente** para las tablas actuales.
{{/if}}

---

## üìÖ Pol√≠ticas de Retenci√≥n

{{#if hipaa_summary.retention_policies}}
{{#each hipaa_summary.retention_policies}}
### üìã {{policy_name}}

| **Configuraci√≥n** | **Valor** |
|-------------------|-----------|
| **Tablas Afectadas** | {{join affected_tables ", "}} |
| **Per√≠odo de Retenci√≥n** | {{retention_period}} |
| **M√©todo de Eliminaci√≥n** | {{deletion_method}} |
| **Retenciones Legales** | {{#if legal_holds}}‚úÖ Soportadas{{else}}‚ùå No configuradas{{/if}} |

{{#ifEquals deletion_method "SECURE_DELETE"}}
**Implementaci√≥n de Eliminaci√≥n Segura**:
```sql
-- Funci√≥n de eliminaci√≥n segura
CREATE OR REPLACE FUNCTION secure_delete_phi(table_name text, record_id uuid)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  sql_statement text;
BEGIN
  -- Verificar permisos
  IF NOT has_deletion_permission(auth.uid(), table_name) THEN
    RAISE EXCEPTION 'Sin permisos para eliminaci√≥n segura';
  END IF;

  -- Log de eliminaci√≥n antes de proceder
  INSERT INTO deletion_audit_log (
    table_name, record_id, deleted_by, deletion_timestamp, reason
  ) VALUES (
    table_name, record_id, auth.uid(), NOW(), 'Retention policy expiry'
  );

  -- Eliminaci√≥n f√≠sica del registro
  sql_statement := format('DELETE FROM %I WHERE id = $1', table_name);
  EXECUTE sql_statement USING record_id;

  -- Sobrescribir espacio en disco (nivel OS requerido)
  PERFORM pg_stat_reset_single_table_counters(table_name::regclass);

  RETURN true;
END;
$$;
```
{{/ifEquals}}

---

{{/each}}
{{else}}
‚ö†Ô∏è **No hay pol√≠ticas de retenci√≥n definidas**. Esto puede representar un riesgo de cumplimiento.

{{alert "warning" "HIPAA requiere pol√≠ticas claras de retenci√≥n y eliminaci√≥n de datos PHI."}}
{{/if}}

---

## üéØ Plan de Acci√≥n Recomendado

### üìã Prioridad Cr√≠tica (30 d√≠as)

{{#each hipaa_summary.compliance_gaps}}
{{#ifEquals severity "CRITICAL"}}
1. **{{gap_type}}** - {{truncate recommendation 100}}
   - **Tablas**: {{join affected_tables ", "}}
   - **Acci√≥n**: Implementaci√≥n inmediata requerida
{{/ifEquals}}
{{/each}}

### ‚ö†Ô∏è Prioridad Alta (90 d√≠as)

{{#each hipaa_summary.compliance_gaps}}
{{#ifEquals severity "HIGH"}}
1. **{{gap_type}}** - {{truncate recommendation 100}}
   - **Tablas**: {{join affected_tables ", "}}
   - **Acci√≥n**: Planificar implementaci√≥n
{{/ifEquals}}
{{/each}}

### üìä Prioridad Media (180 d√≠as)

{{#each hipaa_summary.compliance_gaps}}
{{#ifEquals severity "MEDIUM"}}
1. **{{gap_type}}** - {{truncate recommendation 100}}
   - **Tablas**: {{join affected_tables ", "}}
   - **Acci√≥n**: Incluir en roadmap de mejoras
{{/ifEquals}}
{{/each}}

### üí° Mejoras Continuas

1. **Capacitaci√≥n del Equipo**
   - Entrenamiento en manejo de PHI
   - Procedimientos de respuesta a incidentes
   - Actualizaciones regulares en regulaciones HIPAA

2. **Monitoreo Continuo**
   - Auditor√≠as autom√°ticas mensuales
   - Revisi√≥n de accesos trimestrales
   - Evaluaci√≥n de riesgos semestral

3. **Documentaci√≥n**
   - Mantener pol√≠ticas actualizadas
   - Documentar excepciones y justificaciones
   - Registrar cambios en clasificaciones

---

## üìö Referencias Regulatorias

### üá∫üá∏ Regulaciones HIPAA Aplicables

- **45 CFR 164.308** - Salvaguardas Administrativas
- **45 CFR 164.310** - Salvaguardas F√≠sicas
- **45 CFR 164.312** - Salvaguardas T√©cnicas
- **45 CFR 164.314** - Requisitos Organizacionales
- **45 CFR 164.316** - Pol√≠ticas, Procedimientos y Documentaci√≥n

### üåê Est√°ndares Internacionales

- **ISO 27001** - Gesti√≥n de Seguridad de la Informaci√≥n
- **ISO 27799** - Inform√°tica de la Salud ‚Äî Gesti√≥n de la Seguridad de la Informaci√≥n
- **NIST Cybersecurity Framework** - Marco de Ciberseguridad

### üìñ Recursos Adicionales

- [HHS.gov HIPAA Security Rule](https://www.hhs.gov/hipaa/for-professionals/security/index.html)
- [NIST Special Publication 800-66](https://csrc.nist.gov/publications/detail/sp/800-66/rev-1/final)
- [HL7 FHIR Security Implementation Guide](https://www.hl7.org/fhir/security.html)

---

## üîç Metodolog√≠a de An√°lisis

### ü§ñ Clasificaci√≥n Autom√°tica

El an√°lisis HIPAA se realiz√≥ utilizando:

1. **An√°lisis de Nombres de Columnas**
   - Patrones de PHI (ssn, phone, email, address)
   - Identificadores m√©dicos (patient_id, medical_record_number)
   - Datos demogr√°ficos (birthdate, name, gender)

2. **An√°lisis de Tipos de Datos**
   - Campos de texto libre (notas m√©dicas)
   - Datos binarios (im√°genes m√©dicas)
   - Informaci√≥n financiera (insurance, billing)

3. **An√°lisis de Contexto de Tabla**
   - Prop√≥sito m√©dico de la tabla
   - Relaciones con entidades de pacientes
   - Dominio funcional (cl√≠nico, administrativo, etc.)

### üìä M√©tricas de Confianza

| **Categor√≠a** | **Confianza** | **M√©todo** |
|---------------|---------------|------------|
| **Detecci√≥n PHI Directa** | 95% | An√°lisis de patrones conocidos |
| **Detecci√≥n PHI Indirecta** | 80% | An√°lisis de contexto y relaciones |
| **Clasificaci√≥n de Sensibilidad** | 85% | Reglas de negocio m√©dicas |
| **Requisitos de Acceso** | 90% | An√°lisis de roles y permisos |

---

**üìÖ Reporte generado**: {{formatDate generation_info.generated_at}}
**üîÑ Pr√≥xima revisi√≥n recomendada**: {{formatDate (add generation_info.generated_at "3 months")}}
**üë®‚Äç‚öïÔ∏è Aprobaci√≥n m√©dica requerida**: S√≠
**‚öñÔ∏è Revisi√≥n legal recomendada**: S√≠