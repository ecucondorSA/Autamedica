#!/usr/bin/env python3
"""
Sync environment variables from DevAltamedica to Autamedica
"""

import re
from pathlib import Path


def find_env_vars(source_path):
    """Busca variables de entorno en el proyecto fuente."""
    print(f"üîç Buscando variables de entorno en {source_path}...")

    env_vars = {}

    # Buscar en archivos .env
    for env_file in Path(source_path).rglob('.env*'):
        # Saltar ejemplos y production
        if 'example' in env_file.name.lower() or 'node_modules' in str(env_file):
            continue

        try:
            with open(env_file, 'r') as f:
                content = f.read()

                # Extraer NEXT_PUBLIC_SUPABASE_*
                supabase_url = re.search(r'NEXT_PUBLIC_SUPABASE_URL=(.+)', content)
                supabase_key = re.search(r'NEXT_PUBLIC_SUPABASE_ANON_KEY=(.+)', content)

                if supabase_url:
                    url = supabase_url.group(1).strip().strip('"').strip("'")
                    if url.startswith('http'):
                        env_vars['NEXT_PUBLIC_SUPABASE_URL'] = url
                        print(f"  ‚úì Found URL in {env_file.relative_to(source_path)}")

                if supabase_key:
                    key = supabase_key.group(1).strip().strip('"').strip("'")
                    if len(key) > 50:  # Validar que es una key real
                        env_vars['NEXT_PUBLIC_SUPABASE_ANON_KEY'] = key
                        print(f"  ‚úì Found KEY in {env_file.relative_to(source_path)}")

        except Exception as e:
            pass

    return env_vars


def write_env_file(target_path, env_vars):
    """Escribe el archivo .env.local con las variables encontradas."""

    if not env_vars:
        print("‚ùå No se encontraron variables de entorno v√°lidas")
        return False

    env_content = f"""# Auto-generated by sync-env-vars.py
# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL={env_vars.get('NEXT_PUBLIC_SUPABASE_URL', '')}
NEXT_PUBLIC_SUPABASE_ANON_KEY={env_vars.get('NEXT_PUBLIC_SUPABASE_ANON_KEY', '')}

# App Configuration
NEXT_PUBLIC_APP_URL=http://localhost:3003
NEXT_PUBLIC_AUTH_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:3001

# Feature Flags
NEXT_PUBLIC_ENABLE_ANALYTICS=false
NEXT_PUBLIC_ENABLE_DEBUG=true
"""

    target_file = Path(target_path) / '.env.local'

    with open(target_file, 'w') as f:
        f.write(env_content)

    print(f"\n‚úÖ Archivo creado: {target_file}")
    return True


def sync_env_to_apps():
    """Sincroniza variables a todas las apps que las necesiten."""
    source = Path('/home/edu/Devaltamedica-Independent')
    target_base = Path('/home/edu/Autamedica/apps')

    print("="*60)
    print("üîÑ SYNC ENVIRONMENT VARIABLES")
    print("="*60)

    # Buscar variables en DevAltamedica
    env_vars = find_env_vars(source)

    if not env_vars:
        print("\n‚ö†Ô∏è  No se encontraron variables v√°lidas en DevAltamedica")
        print("   Buscando en sistema...")

        # Fallback: usar valores por defecto conocidos
        env_vars = {
            'NEXT_PUBLIC_SUPABASE_URL': 'https://gtyvdircfhmdjiaelqkg.supabase.co',
            'NEXT_PUBLIC_SUPABASE_ANON_KEY': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd0eXZkaXJjZmhtZGppYWVscWtnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjYzNDQ0NzAsImV4cCI6MjA0MTkyMDQ3MH0.eyi7AKH0JQNP1pCO6V8hDtixTJgzG01mZ1gBVwJYy0c'
        }
        print("   ‚ÑπÔ∏è  Usando valores de configuraci√≥n conocidos")

    print(f"\nüìã Variables encontradas:")
    print(f"  URL: {env_vars.get('NEXT_PUBLIC_SUPABASE_URL', 'N/A')}")
    print(f"  KEY: {env_vars.get('NEXT_PUBLIC_SUPABASE_ANON_KEY', 'N/A')[:20]}...")

    # Apps que necesitan env
    apps_needing_env = ['patients', 'doctors', 'companies', 'admin', 'auth', 'web-app']

    print(f"\nüì¶ Sincronizando a {len(apps_needing_env)} apps...")

    success_count = 0
    for app_name in apps_needing_env:
        app_path = target_base / app_name

        if not app_path.exists():
            print(f"  ‚ö†Ô∏è  {app_name} - no existe")
            continue

        if write_env_file(app_path, env_vars):
            success_count += 1
            print(f"  ‚úÖ {app_name}")

    print(f"\n{'='*60}")
    print(f"üìä RESUMEN")
    print(f"{'='*60}")
    print(f"‚úÖ Apps configuradas: {success_count}/{len(apps_needing_env)}")
    print(f"\nüí° Reinicia los dev servers para aplicar cambios")


if __name__ == '__main__':
    sync_env_to_apps()
