#!/usr/bin/env node

/**
 * Script to validate environment variables configuration for production
 * Uses @autamedica/shared validation functions
 */

import {
  validateEnvironmentSecurity,
  validateProductionEnvironment
} from '../packages/shared/dist/env.js';

console.log('üîß Validating environment configuration for production...\n');

try {
  // 1. Run basic security validation
  console.log('üîí Running security validation...');
  validateEnvironmentSecurity();
  console.log('‚úÖ Security validation passed');
  console.log('  ‚Ä¢ No server-only variables exposed as NEXT_PUBLIC_*');
  console.log('  ‚Ä¢ No conflicting duplicate variables found\n');

  // 2. Run production-specific validation
  console.log('üè• Running production environment validation...');
  const productionValidation = validateProductionEnvironment();

  console.log('\nüìä Production Environment Status:');
  console.log(`  üîê Security:    ${productionValidation.security ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  console.log(`  üóÑÔ∏è Database:    ${productionValidation.database ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  console.log(`  üí≥ Payments:    ${productionValidation.payments ? '‚úÖ PASS' : '‚ö†Ô∏è  WARN'}`);
  console.log(`  üìä Monitoring:  ${productionValidation.monitoring ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  console.log(`  üè• Compliance:  ${productionValidation.compliance ? '‚úÖ PASS' : '‚ùå FAIL'}`);

  // 3. Report any issues
  if (productionValidation.issues.length > 0) {
    console.log('\n‚ö†Ô∏è  Issues found:');
    productionValidation.issues.forEach(issue => {
      console.log(`  ‚Ä¢ ${issue}`);
    });
  }

  // 4. Determine overall status
  const criticalSections = [
    productionValidation.security,
    productionValidation.database,
    productionValidation.monitoring,
    productionValidation.compliance
  ];

  const allCriticalPass = criticalSections.every(section => section);

  if (allCriticalPass) {
    console.log('\nüéØ Environment validation completed successfully!');
    console.log('‚úÖ Ready for production deployment');

    if (!productionValidation.payments) {
      console.log('\n‚ö†Ô∏è  Note: Payment configuration incomplete (non-critical for MVP)');
    }
  } else {
    console.log('\n‚ùå Environment validation failed - Critical issues must be resolved');
    process.exit(1);
  }

} catch (error) {
  console.error('\n‚ùå Environment validation failed:');
  console.error(error.message);
  process.exit(1);
}