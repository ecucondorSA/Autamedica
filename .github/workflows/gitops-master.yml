name: üéØ GitOps Master

on:
  schedule:
    # Cada 2 horas
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      skip_commit:
        description: 'Skip auto-commit'
        required: false
        default: 'false'
      skip_issues:
        description: 'Skip issue creation'
        required: false
        default: 'false'

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: read

jobs:
  gitops-automation:
    name: GitOps Automation
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚öôÔ∏è Configurar Git
        run: |
          git config user.name "AutaMedica Bot"
          git config user.email "bot@autamedica.com"

      - name: üîç Detectar cambios
        id: changes
        if: github.event.inputs.skip_commit != 'true'
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            CHANGED=$(git status --porcelain | wc -l)
            echo "changed_files=$CHANGED" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: üíæ Auto Commit
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          BRANCH=${GITHUB_REF##*/}

          # No commit en branches protegidas
          if [[ "$BRANCH" == "main" ]] || [[ "$BRANCH" == "master" ]]; then
            echo "üîí Branch protegida, saltando commit"
            exit 0
          fi

          TIMESTAMP=$(date +%Y-%m-%d_%H:%M:%S)
          SUMMARY=$(git status --short | head -20)

          git add -A
          git commit --no-verify -m "chore(gitops): auto-commit $TIMESTAMP ü§ñ

          Changes: ${{ steps.changes.outputs.changed_files }} files

          $SUMMARY

          Auto-generated by GitOps Master" || echo "No changes to commit"

          git push origin $BRANCH || echo "Push failed or no changes"

      - name: üîç Analizar logs de builds
        id: analyze_logs
        if: github.event.inputs.skip_issues != 'true'
        continue-on-error: true
        run: |
          # Buscar logs de build recientes
          LOG_FILES=$(find . -name "build.log" -o -name "*.log" -mtime -1 2>/dev/null || echo "")

          if [ -z "$LOG_FILES" ]; then
            echo "has_errors=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No se encontraron logs recientes"
            exit 0
          fi

          # Buscar errores cr√≠ticos
          ERRORS=$(grep -h "ERROR\|FATAL\|CRITICAL" $LOG_FILES 2>/dev/null | head -20 || echo "")

          if [ -n "$ERRORS" ]; then
            echo "has_errors=true" >> $GITHUB_OUTPUT

            # Guardar errores en archivo temporal
            echo "$ERRORS" > /tmp/build-errors.txt
            echo "‚úÖ Errores detectados en logs"
          else
            echo "has_errors=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No se encontraron errores en logs"
          fi

      - name: üêõ Crear issue autom√°tico para errores
        if: steps.analyze_logs.outputs.has_errors == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TIMESTAMP=$(date +%Y-%m-%d_%H:%M)
          ERRORS=$(cat /tmp/build-errors.txt)

          # Verificar si ya existe issue similar hoy
          TODAY=$(date +%Y-%m-%d)
          EXISTING=$(gh issue list \
            --label "auto-generated,bug" \
            --search "Build errors detected $TODAY" \
            --json number \
            --jq '.[0].number' || echo "")

          if [ -n "$EXISTING" ]; then
            echo "‚ÑπÔ∏è Issue #$EXISTING ya existe para errores de hoy"

            # Agregar comentario con nuevos errores
            gh issue comment $EXISTING --body "**Nuevos errores detectados a las $TIMESTAMP**

          \`\`\`
          $ERRORS
          \`\`\`"

            echo "‚úÖ Comentario agregado a issue #$EXISTING"
          else
            # Crear nuevo issue
            gh issue create \
              --title "üö® Build errors detected $TIMESTAMP" \
              --label "bug,auto-generated,high-priority" \
              --body "## Build Errors Detected

          **Timestamp:** $TIMESTAMP
          **Workflow:** ${{ github.workflow }}
          **Run:** ${{ github.run_number }}

          ### Errors Found

          \`\`\`
          $ERRORS
          \`\`\`

          ### Actions Required

          - [ ] Investigar causa ra√≠z
          - [ ] Aplicar fix
          - [ ] Validar que no se repita

          ---

          ü§ñ Auto-generated by GitOps Master"

            echo "‚úÖ Nuevo issue creado"
          fi

      - name: üîÑ Verificar PRs estancados
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Buscar PRs abiertos por m√°s de 7 d√≠as sin actividad
          STALE_DAYS=7

          gh pr list \
            --state open \
            --json number,title,updatedAt \
            --jq ".[] | select((.updatedAt | fromdateiso8601) < (now - ($STALE_DAYS * 86400)))" \
          | jq -r '.number' \
          | while read PR_NUM; do

            # Verificar si ya tiene label stale
            HAS_LABEL=$(gh pr view $PR_NUM --json labels --jq '.labels[] | select(.name=="stale") | .name' || echo "")

            if [ -z "$HAS_LABEL" ]; then
              echo "‚ö†Ô∏è PR #$PR_NUM est√° estancado, agregando label"

              gh pr edit $PR_NUM --add-label "stale"

              gh pr comment $PR_NUM --body "‚ö†Ô∏è Este PR lleva m√°s de $STALE_DAYS d√≠as sin actividad.

          Por favor:
          - Actualiza el PR si a√∫n es relevante
          - Ci√©rralo si ya no es necesario
          - Solicita review si est√° listo

          ü§ñ Auto-generated by GitOps Master"
            fi
          done

      - name: üìä Estad√≠sticas del repositorio
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üìä Estad√≠sticas del Repositorio"
          echo "================================"

          OPEN_PRS=$(gh pr list --state open --json number --jq '. | length')
          OPEN_ISSUES=$(gh issue list --state open --json number --jq '. | length')

          echo "üìã PRs abiertos: $OPEN_PRS"
          echo "üêõ Issues abiertos: $OPEN_ISSUES"

          # Commits hoy
          TODAY_COMMITS=$(git log --since="midnight" --oneline | wc -l)
          echo "üìù Commits hoy: $TODAY_COMMITS"

          # Archivos modificados recientemente
          RECENT_FILES=$(git diff --name-only HEAD~10..HEAD 2>/dev/null | wc -l || echo "0")
          echo "üìÇ Archivos modificados (√∫ltimos 10 commits): $RECENT_FILES"

      - name: ‚úÖ Resumen Final
        run: |
          echo "‚úÖ GitOps Master workflow completado"
          echo ""
          echo "Acciones realizadas:"
          echo "  - Auto-commit: ${{ steps.changes.outputs.has_changes == 'true' && '‚úÖ' || '‚è∏Ô∏è' }}"
          echo "  - An√°lisis de logs: ${{ steps.analyze_logs.outputs.has_errors == 'true' && '‚ö†Ô∏è Errores encontrados' || '‚úÖ Sin errores' }}"
          echo "  - Verificaci√≥n de PRs estancados: ‚úÖ"
          echo "  - Estad√≠sticas: ‚úÖ"
