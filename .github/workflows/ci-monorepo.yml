name: CI/CD Monorepo

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]

env:
  NODE_OPTIONS: --max-old-space-size=4096

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      apps: ${{ steps.changes.outputs.apps }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed packages
        id: changes
        run: |
          # Detectar cambios en packages
          if git diff --name-only HEAD~1 | grep -q "^packages/"; then
            echo "packages=true" >> $GITHUB_OUTPUT
          else
            echo "packages=false" >> $GITHUB_OUTPUT
          fi

          # Detectar cambios en apps
          if git diff --name-only HEAD~1 | grep -q "^apps/"; then
            echo "apps=true" >> $GITHUB_OUTPUT
          else
            echo "apps=false" >> $GITHUB_OUTPUT
          fi

  build-packages:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.packages == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages
        run: pnpm build:packages

      - name: Run package tests
        run: pnpm --filter "./packages/*" test --run

      - name: Validate contracts
        run: pnpm docs:validate

  build-apps:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-packages]
    if: always() && (needs.detect-changes.outputs.apps == 'true' || needs.build-packages.result == 'success')
    strategy:
      matrix:
        app: [web-app, doctors, patients, companies]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build packages first
        run: pnpm build:packages

      - name: Lint app
        run: pnpm --filter @autamedica/${{ matrix.app }} lint

      - name: Type check app
        run: pnpm --filter @autamedica/${{ matrix.app }} type-check

      - name: Build app
        run: pnpm --filter @autamedica/${{ matrix.app }} build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run security audit
        run: |
          # Buscar credenciales hardcodeadas
          echo "üîç Scanning for hardcoded credentials..."
          matches="$(grep -r "eyJ[A-Za-z0-9_-]" \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude-dir=.next \
            --exclude-dir=.open-next \
            --exclude-dir=dist \
            --exclude-dir=playwright-report \
            --exclude-dir=playwright-report-doctor-videocall \
            --exclude-dir=test-results \
            --exclude="*.md" \
            --exclude="*.env" \
            --exclude="*.env.*" \
            --exclude="*.spec.ts" \
            --exclude="test-supabase-rls.mjs" \
            --exclude="security-check.sh" \
            . || true)"
          if [ -n "$matches" ]; then
            echo "‚ùå Found hardcoded JWT tokens in:"
            echo "$matches"
            echo "‚ùå Found hardcoded JWT tokens"
            exit 1
          fi

          # Verificar configuraci√≥n de cookies
          echo "üç™ Checking cookie security..."
          if ! grep -r "httpOnly.*true" apps/*/middleware.ts; then
            echo "‚ö†Ô∏è Missing httpOnly cookies"
          fi

          echo "‚úÖ Security scan passed"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-apps]
    if: github.ref == 'refs/heads/staging'
    strategy:
      matrix:
        app: [web-app, doctors, patients, companies]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: autamedica-${{ matrix.app }}-staging
          directory: apps/${{ matrix.app }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-apps, security-scan]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        app: [web-app, doctors, patients, companies]
    steps:
      - uses: actions/checkout@v4
