name: Database Schema Validation

on:
  pull_request:
    paths:
      - 'database/**'
      - 'packages/types/src/supabase/**'
      - 'scripts/*db*.mjs'
      - 'scripts/test-fixtures/**'
  push:
    branches: [main, staging]
    paths:
      - 'database/**'
      - 'packages/types/src/supabase/**'
      - 'scripts/*db*.mjs'

jobs:
  db-schema:
    name: Database Schema
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate database types
        run: pnpm db:generate

      - name: Validate schema synchronization
        run: pnpm db:validate

      - name: Run database tests
        run: pnpm db:test

      - name: Check database snapshots are up-to-date
        run: |
          # Store initial git status
          git add -A
          initial_status=$(git status --porcelain)

          # Run tests which regenerate snapshots
          pnpm db:test

          # Check if snapshots changed
          new_status=$(git status --porcelain)

          if [[ "$initial_status" != "$new_status" ]]; then
            echo "‚ùå Database test snapshots are out of sync"
            echo "Changes detected in test fixtures:"
            git diff --name-only scripts/test-fixtures/*.snapshot.ts
            echo ""
            echo "Please run 'pnpm db:test' locally and commit the updated snapshots"
            exit 1
          else
            echo "‚úÖ Database snapshots are up-to-date"
          fi

      - name: Check for uncommitted changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "‚ùå Generated types are out of sync with schema"
            echo "Please run 'pnpm db:generate' and commit the changes"
            git status --porcelain
            exit 1
          else
            echo "‚úÖ Database types are in sync"
          fi

      - name: Verify TypeScript compilation
        run: pnpm --filter @autamedica/types typecheck

  db-schema-report:
    name: Schema Report
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: db-schema

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate validation report
        id: validation
        run: |
          # Generate report and capture output
          echo "üìä Database Schema Validation Report" > report.txt
          echo "=" >> report.txt
          echo "" >> report.txt

          # Run validation and capture exit code
          if pnpm db:validate 2>&1 | tee -a report.txt; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=warning" >> $GITHUB_OUTPUT
          fi

          echo "" >> report.txt
          echo "üß™ Test Results:" >> report.txt
          pnpm db:test 2>&1 | tee -a report.txt

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.txt', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Database Schema Validation Report')
            );

            const body = `## üóÑÔ∏è Database Schema Validation Report

\`\`\`
${report}
\`\`\`

*Generated by \`pnpm db:validate\` and \`pnpm db:test\`*
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }