name: "AI Review (ChatGPT)"

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get diff
        run: |
          echo "🔍 Obteniendo diff del PR..."
          git fetch origin ${{ github.base_ref }} --depth=1
          git diff --unified=3 origin/${{ github.base_ref }}...HEAD > pr.diff

          # Debug: show diff size
          echo "📊 Tamaño del diff: $(wc -l < pr.diff) líneas"

      - name: Ask ChatGPT for Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "⚠️  OPENAI_API_KEY no configurado - omitiendo revisión ChatGPT"
            echo "Sin revisión ChatGPT disponible." > review.md
            exit 0
          fi

          echo "🤖 Solicitando revisión a ChatGPT..."

          # Prepare system prompt for medical software
          system_prompt="Eres un revisor senior de AutaMedica, plataforma médica HIPAA-compliant.

          Contexto técnico:
          - Monorepo: apps (web-app, doctors, patients, companies) + packages (@autamedica/*)
          - TypeScript estricto con branded types
          - ESLint enterprise con boundaries
          - Compliance HIPAA obligatorio

          Entrega revisión estructurada enfocada en:
          1. SEGURIDAD: PHI/PII, secrets, validaciones médicas
          2. CONTRATOS: breaking changes en @autamedica/types
          3. PERFORMANCE: bundle size, async patterns
          4. DX: accesibilidad, responsividad
          5. ARQUITECTURA: boundaries, imports, dependencies

          Formato requerido:
          - Riesgos críticos con severity HIGH/MEDIUM/LOW
          - Impacto en contratos @autamedica/types
          - Sugerencias concretas con ejemplos de diff
          - Puntaje 0-100 con go/no-go final"

          user_prompt="Revisá este diff de AutaMedica considerando compliance médico y calidad enterprise:"

          # Prepare diff content (escape for JSON)
          diff_content=$(jq -Rs '.' pr.diff)

          # Call OpenAI API
          response=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"gpt-4o\",
              \"messages\": [
                {
                  \"role\": \"system\",
                  \"content\": $(echo "$system_prompt" | jq -Rs '.')
                },
                {
                  \"role\": \"user\",
                  \"content\": $(echo "$user_prompt" | jq -Rs '.')
                },
                {
                  \"role\": \"user\",
                  \"content\": $diff_content
                }
              ],
              \"temperature\": 0.1,
              \"max_tokens\": 2000
            }")

          # Extract content from response
          if echo "$response" | jq -e '.choices[0].message.content' >/dev/null 2>&1; then
            echo "$response" | jq -r '.choices[0].message.content' > review.md
            echo "✅ Revisión ChatGPT completada"

            # Show token usage if available
            if echo "$response" | jq -e '.usage' >/dev/null 2>&1; then
              echo "📊 Token usage:"
              echo "$response" | jq '.usage'
            fi
          else
            echo "❌ Error en respuesta de ChatGPT:"
            echo "$response" | jq '.'
            echo "Error obteniendo revisión de ChatGPT. Verificar API key y límites." > review.md
          fi

      - name: Comment ChatGPT Review on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = '';

            try {
              body = fs.readFileSync('review.md', 'utf8');
            } catch (error) {
              body = '❌ Error: No se pudo obtener la revisión de ChatGPT.';
            }

            const fullComment = `## 🧠 Revisión AI - ChatGPT

            ${body}

            ---
            *Revisión automática generada por GPT-4o - ${new Date().toISOString()}*`;

            // Find existing ChatGPT review comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(c =>
              c.body.includes('🧠 Revisión AI - ChatGPT')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: fullComment
              });
              console.log('✅ Comentario ChatGPT actualizado');
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: fullComment
              });
              console.log('✅ Comentario ChatGPT creado');
            }