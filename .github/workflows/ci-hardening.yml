name: CI Hardening

on:
  pull_request:
    branches: [ main, staging ]
  push:
    branches: [ main, staging ]

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Security and Quality Validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm -w install --frozen-lockfile
        
      - name: Lint code
        run: pnpm -w turbo run lint --filter=...
        
      - name: Type check
        run: pnpm -w turbo run typecheck --filter=...
        
      - name: Build packages
        run: pnpm -w turbo run build --filter=@autamedica/*
        
      - name: Build apps
        run: pnpm -w turbo run build --filter=./apps/*
        
      - name: Run tests
        run: pnpm -w turbo run test --filter=...
        
      - name: Security audit
        run: pnpm audit --audit-level moderate
        
      - name: Secrets scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--redact --verbose"
          
      - name: Dependency vulnerability scan
        run: |
          pnpm audit --json > security-audit.json
          echo "Security audit completed"
          
      - name: Code quality check
        run: |
          pnpm -w turbo run lint --filter=... -- --max-warnings 0
          
      - name: Type safety check
        run: |
          pnpm -w turbo run typecheck --filter=...
          
      - name: Build verification
        run: |
          pnpm -w turbo run build --filter=...
          
      - name: Upload security audit
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit
          path: security-audit.json
          
  security-headers:
    runs-on: ubuntu-latest
    name: Security Headers Validation
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm -w install --frozen-lockfile
        
      - name: Build apps
        run: pnpm -w turbo run build --filter=./apps/*
        
      - name: Check security headers files
        run: |
          echo "Checking for security headers files..."
          for app in patients doctors auth; do
            if [ -f "apps/$app/_headers" ]; then
              echo "✅ $app/_headers exists"
              cat "apps/$app/_headers"
            else
              echo "❌ $app/_headers missing"
              exit 1
            fi
          done
          
      - name: Validate security headers content
        run: |
          echo "Validating security headers content..."
          for app in patients doctors auth; do
            echo "Checking $app/_headers..."
            if grep -q "Strict-Transport-Security" "apps/$app/_headers"; then
              echo "✅ HSTS header found in $app"
            else
              echo "❌ HSTS header missing in $app"
              exit 1
            fi
            
            if grep -q "Content-Security-Policy" "apps/$app/_headers"; then
              echo "✅ CSP header found in $app"
            else
              echo "❌ CSP header missing in $app"
              exit 1
            fi
            
            if grep -q "X-Frame-Options" "apps/$app/_headers"; then
              echo "✅ X-Frame-Options header found in $app"
            else
              echo "❌ X-Frame-Options header missing in $app"
              exit 1
            fi
          done
          
  cors-validation:
    runs-on: ubuntu-latest
    name: CORS Configuration Validation
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm -w install --frozen-lockfile
        
      - name: Build shared package
        run: pnpm -w build --filter=@autamedica/shared
        
      - name: Check CORS utilities
        run: |
          echo "Checking CORS utilities..."
          if [ -f "packages/shared/src/cors.ts" ]; then
            echo "✅ CORS utilities found"
            grep -n "ALLOWED_ORIGINS" packages/shared/src/cors.ts
            grep -n "getCorsHeaders" packages/shared/src/cors.ts
          else
            echo "❌ CORS utilities missing"
            exit 1
          fi
          
      - name: Check CORS integration
        run: |
          echo "Checking CORS integration in auth app..."
          if grep -q "getCorsHeaders" apps/auth/src/middleware.ts; then
            echo "✅ CORS integration found in middleware"
          else
            echo "❌ CORS integration missing in middleware"
            exit 1
          fi
          
          if grep -q "getCorsHeaders" apps/auth/src/app/api/session-sync/route.ts; then
            echo "✅ CORS integration found in session-sync API"
          else
            echo "❌ CORS integration missing in session-sync API"
            exit 1
          fi
          
  database-schema:
    runs-on: ubuntu-latest
    name: Database Schema Validation
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check migration files
        run: |
          echo "Checking migration files..."
          if [ -f "supabase/migrations/20251006000001_patient_care_team_and_hipaa_triggers.sql" ]; then
            echo "✅ Patient care team migration found"
          else
            echo "❌ Patient care team migration missing"
            exit 1
          fi
          
      - name: Validate migration content
        run: |
          echo "Validating migration content..."
          migration_file="supabase/migrations/20251006000001_patient_care_team_and_hipaa_triggers.sql"
          
          if grep -q "CREATE TABLE.*patient_care_team" "$migration_file"; then
            echo "✅ patient_care_team table creation found"
          else
            echo "❌ patient_care_team table creation missing"
            exit 1
          fi
          
          if grep -q "ENABLE ROW LEVEL SECURITY" "$migration_file"; then
            echo "✅ RLS enablement found"
          else
            echo "❌ RLS enablement missing"
            exit 1
          fi
          
          if grep -q "CREATE POLICY" "$migration_file"; then
            echo "✅ RLS policies found"
          else
            echo "❌ RLS policies missing"
            exit 1
          fi
          
          if grep -q "CREATE TRIGGER" "$migration_file"; then
            echo "✅ Audit triggers found"
          else
            echo "❌ Audit triggers missing"
            exit 1
          fi
          
  dependency-security:
    runs-on: ubuntu-latest
    name: Dependency Security Check
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm -w install --frozen-lockfile
        
      - name: Check pnpm overrides
        run: |
          echo "Checking pnpm overrides..."
          if grep -q "pnpm" package.json && grep -q "overrides" package.json; then
            echo "✅ pnpm overrides found"
            grep -A 5 "pnpm" package.json
          else
            echo "❌ pnpm overrides missing"
            exit 1
          fi
          
      - name: Verify CVE fixes
        run: |
          echo "Verifying CVE fixes..."
          if grep -q "path-to-regexp.*6.3.0" package.json; then
            echo "✅ path-to-regexp CVE fix found"
          else
            echo "❌ path-to-regexp CVE fix missing"
            exit 1
          fi
          
          if grep -q "cookie.*0.7.0" package.json; then
            echo "✅ cookie CVE fix found"
          else
            echo "❌ cookie CVE fix missing"
            exit 1
          fi
          
      - name: Run security audit
        run: |
          echo "Running security audit..."
          pnpm audit --audit-level moderate || true
          
  final-validation:
    runs-on: ubuntu-latest
    name: Final Security Validation
    needs: [validate, security-headers, cors-validation, database-schema, dependency-security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Security checklist
        run: |
          echo "🔒 Security Checklist:"
          echo "✅ Code linting and type checking"
          echo "✅ Security headers validation"
          echo "✅ CORS configuration validation"
          echo "✅ Database schema validation"
          echo "✅ Dependency security check"
          echo "✅ Secrets scanning"
          echo "✅ Vulnerability scanning"
          echo ""
          echo "🎉 All security validations passed!"
          
      - name: Generate security report
        run: |
          echo "# Security Validation Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Status: ✅ PASSED" >> security-report.md
          echo "" >> security-report.md
          echo "All security validations have been completed successfully." >> security-report.md
          echo "" >> security-report.md
          echo "### Validated Components:" >> security-report.md
          echo "- Code quality and type safety" >> security-report.md
          echo "- Security headers configuration" >> security-report.md
          echo "- CORS security implementation" >> security-report.md
          echo "- Database schema and RLS policies" >> security-report.md
          echo "- Dependency vulnerability management" >> security-report.md
          echo "- Secrets and sensitive data protection" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md