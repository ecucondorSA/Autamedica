name: Vercel Deployment Validation

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

jobs:
  validate-vercel-config:
    name: Validate Vercel Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare pnpm@9.15.2 --activate
          
      - name: Validate vercel.json files
        run: |
          echo "üîç Validating Vercel configurations..."
          
          # Check all vercel.json files exist
          for app in web-app doctors patients companies admin; do
            if [ ! -f "apps/$app/vercel.json" ]; then
              echo "‚ùå Missing vercel.json in apps/$app"
              exit 1
            fi
            
            # Validate JSON syntax
            node -e "JSON.parse(require('fs').readFileSync('apps/$app/vercel.json', 'utf8'))" || {
              echo "‚ùå Invalid JSON in apps/$app/vercel.json"
              exit 1
            }
            
            # Check required fields
            node -e "
              const config = JSON.parse(require('fs').readFileSync('apps/$app/vercel.json', 'utf8'));
              const required = ['installCommand', 'buildCommand', 'outputDirectory', 'framework'];
              const missing = required.filter(field => !config[field]);
              if (missing.length > 0) {
                console.error('‚ùå Missing fields in apps/$app/vercel.json:', missing.join(', '));
                process.exit(1);
              }
              
              // Validate commands include corepack
              if (!config.installCommand.includes('corepack')) {
                console.error('‚ùå installCommand must include corepack in apps/$app/vercel.json');
                process.exit(1);
              }
              
              // Validate outputDirectory
              if (config.outputDirectory !== '.next') {
                console.error('‚ö†Ô∏è  Warning: outputDirectory should be .next in apps/$app/vercel.json');
              }
              
              console.log('‚úÖ apps/$app/vercel.json is valid');
            "
          done
          
      - name: Check package.json consistency
        run: |
          echo "üîç Checking package.json files..."
          
          # Check packageManager field
          EXPECTED_PNPM="pnpm@9.15.2"
          PACKAGE_MANAGER=$(node -e "console.log(require('./package.json').packageManager || '')")
          
          if [ "$PACKAGE_MANAGER" != "$EXPECTED_PNPM" ]; then
            echo "‚ùå Root package.json must have packageManager: '$EXPECTED_PNPM'"
            exit 1
          fi
          
          # Check Next.js is in dependencies
          for app in web-app doctors patients companies admin; do
            HAS_NEXT=$(node -e "
              const pkg = require('./apps/$app/package.json');
              const hasNext = (pkg.dependencies && pkg.dependencies.next) || 
                              (pkg.devDependencies && pkg.devDependencies.next);
              console.log(hasNext ? 'yes' : 'no');
            ")
            
            if [ "$HAS_NEXT" = "no" ]; then
              echo "‚ùå apps/$app must have 'next' in dependencies"
              exit 1
            fi
            
            echo "‚úÖ apps/$app has Next.js dependency"
          done
          
      - name: Validate workspace configuration
        run: |
          echo "üîç Validating workspace configuration..."
          
          # Check pnpm-workspace.yaml exists
          if [ ! -f "pnpm-workspace.yaml" ]; then
            echo "‚ùå Missing pnpm-workspace.yaml"
            exit 1
          fi
          
          # Validate workspace packages
          node -e "
            const yaml = require('fs').readFileSync('pnpm-workspace.yaml', 'utf8');
            if (!yaml.includes('apps/*') || !yaml.includes('packages/*')) {
              console.error('‚ùå pnpm-workspace.yaml must include apps/* and packages/*');
              process.exit(1);
            }
            console.log('‚úÖ pnpm-workspace.yaml is valid');
          "
          
      - name: Test local build
        run: |
          echo "üîç Testing local build..."
          pnpm install --frozen-lockfile=false
          
          # Test each app can build
          for app in doctors; do
            echo "Building apps/$app..."
            pnpm --filter @autamedica/$app build || {
              echo "‚ùå Failed to build apps/$app"
              exit 1
            }
          done
          
      - name: Check environment variables template
        run: |
          echo "üîç Checking .env.example files..."
          
          REQUIRED_VARS=(
            "NEXT_PUBLIC_SUPABASE_URL"
            "NEXT_PUBLIC_SUPABASE_ANON_KEY"
            "NEXT_PUBLIC_APP_NAME"
          )
          
          for app in web-app doctors patients companies admin; do
            if [ ! -f "apps/$app/.env.example" ]; then
              echo "‚ö†Ô∏è  Warning: Missing .env.example in apps/$app"
            else
              for var in "${REQUIRED_VARS[@]}"; do
                if ! grep -q "$var" "apps/$app/.env.example"; then
                  echo "‚ö†Ô∏è  Warning: Missing $var in apps/$app/.env.example"
                fi
              done
            fi
          done
          
      - name: Summary
        if: always()
        run: |
          echo "üìä Validation Summary"
          echo "====================="
          echo "‚úÖ All Vercel configurations validated"
          echo "‚úÖ Package.json files are consistent"
          echo "‚úÖ Workspace configuration is correct"
          echo "‚úÖ Apps can build locally"
          echo ""
          echo "üöÄ Ready for Vercel deployment!"