name: AutaMedica Playwright Python CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
        browser: [chromium]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/python/requirements.txt
        
    - name: Install Playwright browsers
      run: |
        python -m playwright install ${{ matrix.browser }}
        python -m playwright install-deps ${{ matrix.browser }}
        
    - name: Check AutaMedica services
      run: |
        echo "üîç Verificando servicios de AutaMedica..."
        curl -f http://localhost:3000 || echo "‚ùå Auth service no disponible"
        curl -f http://localhost:3001 || echo "‚ùå Doctors app no disponible"
        curl -f http://localhost:3003 || echo "‚ùå Patients app no disponible"
        curl -f http://localhost:8888 || echo "‚ùå Signaling server no disponible"
        
    - name: Run Playwright tests
      run: |
        cd tests/python
        pytest -v \
          --maxfail=1 \
          --tb=short \
          --html=test-results/report.html \
          --self-contained-html \
          --junitxml=test-results/junit.xml \
          --cov=. \
          --cov-report=html:test-results/coverage \
          --cov-report=xml:test-results/coverage.xml
      env:
        PYTHONPATH: ${{ github.workspace }}/tests/python
        DISPLAY: :99
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-test-results-${{ matrix.browser }}
        path: |
          tests/python/test-results/
          tests/python/test-artifacts/
          tests/python/baselines/
        retention-days: 30
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: tests/python/test-results/coverage.xml
        flags: playwright-python
        name: playwright-coverage
        
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'tests/python/test-results/report.html';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            const comment = `## üß™ Playwright Test Results
            
            Los tests de Playwright se ejecutaron exitosamente. 
            
            üìä **Resumen:**
            - Navegador: ${{ matrix.browser }}
            - Python: ${{ matrix.python-version }}
            - Reporte HTML: Disponible en artifacts
            
            üîç **Detalles:**
            \`\`\`html
            ${report.substring(0, 1000)}...
            \`\`\`
            
            üìÅ **Artefactos:**
            - Screenshots y videos de fallos
            - Reportes de accesibilidad
            - M√©tricas de performance
            - Baselines de regresi√≥n visual
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  visual-regression:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/python/requirements.txt
        python -m playwright install chromium
        
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        name: playwright-test-results-chromium
        path: tests/python/
        
    - name: Compare visual baselines
      run: |
        cd tests/python
        python -c "
        import os
        from pathlib import Path
        
        baselines = Path('baselines')
        artifacts = Path('test-artifacts')
        
        if baselines.exists() and artifacts.exists():
            print('üìä Comparando baselines visuales...')
            for baseline in baselines.glob('*.png'):
                artifact = artifacts / f'{baseline.stem}_actual.png'
                if artifact.exists():
                    print(f'‚úÖ {baseline.name} - Baseline disponible')
                else:
                    print(f'‚ö†Ô∏è {baseline.name} - Sin artefacto correspondiente')
        else:
            print('‚ÑπÔ∏è No hay baselines o artefactos para comparar')
        "
        
    - name: Upload visual comparison
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: visual-regression-comparison
        path: tests/python/baselines/
        retention-days: 30

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/python/requirements.txt
        python -m playwright install chromium
        
    - name: Run performance tests
      run: |
        cd tests/python
        pytest test_performance.py -v \
          --html=test-results/performance-report.html \
          --self-contained-html \
          --junitxml=test-results/performance-junit.xml
          
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: tests/python/test-results/performance-*
        retention-days: 30

  accessibility-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/python/requirements.txt
        python -m playwright install chromium
        
    - name: Run accessibility tests
      run: |
        cd tests/python
        pytest test_accessibility.py -v \
          --html=test-results/accessibility-report.html \
          --self-contained-html \
          --junitxml=test-results/accessibility-junit.xml
          
    - name: Upload accessibility results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-test-results
        path: tests/python/test-results/accessibility-*
        retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [test, visual-regression, performance-test, accessibility-test]
    if: always()
    
    steps:
    - name: Notify test completion
      run: |
        echo "üéâ Todos los tests de Playwright han sido ejecutados"
        echo "üìä Resultados disponibles en artifacts"
        echo "üîç Revisar reportes HTML para detalles completos"