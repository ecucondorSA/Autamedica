#!/bin/bash

# test-git-workflow: Test automatizado del sistema Git Workflow Autamedica
# Uso: ./test-git-workflow

set -e

echo "🧪 Test Automatizado - Git Workflow Autamedica"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📅 $(date)"
echo "📁 Directorio: $(pwd)"
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Contadores
TESTS_TOTAL=0
TESTS_PASSED=0
TESTS_FAILED=0

# Función para test individual
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="$3"

    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    echo -n "🔍 Test $TESTS_TOTAL: $test_name... "

    if eval "$test_command" >/dev/null 2>&1; then
        echo -e "${GREEN}✅ PASS${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        return 0
    else
        echo -e "${RED}❌ FAIL${NC}"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        if [ -n "$expected_result" ]; then
            echo "   Expected: $expected_result"
        fi
        return 1
    fi
}

# Función para test con output
run_test_with_output() {
    local test_name="$1"
    local test_command="$2"
    local grep_pattern="$3"

    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    echo -n "🔍 Test $TESTS_TOTAL: $test_name... "

    local output
    output=$(eval "$test_command" 2>&1)

    if echo "$output" | grep -q "$grep_pattern"; then
        echo -e "${GREEN}✅ PASS${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        return 0
    else
        echo -e "${RED}❌ FAIL${NC}"
        echo "   Output: $output"
        echo "   Expected pattern: $grep_pattern"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        return 1
    fi
}

echo "📋 FASE 1: Validaciones Básicas"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Test 1: Verificar que estamos en repo Git
run_test "Repositorio Git válido" "git status" "En repo git"

# Test 2: Detectar rama actual
run_test_with_output "Detección de rama actual" "git branch --show-current" "."

# Test 3: Scripts ejecutables existen
run_test "Script git-claude existe y es ejecutable" "test -x ./git-claude"
run_test "Script git-flow-assistant existe y es ejecutable" "test -x ./git-flow-assistant"

# Test 4: Cheatsheet existe
run_test "Cheatsheet existe" "test -f ./GIT_WORKFLOW_CHEATSHEET.md"
run_test_with_output "Cheatsheet contiene flujo" "head -20 ./GIT_WORKFLOW_CHEATSHEET.md" "feature.*develop.*staging.*main"

echo ""
echo "📋 FASE 2: Preparación de Archivos de Test"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Crear archivo dummy para test
TEST_FILE="apps/web-app/test-dummy-$(date +%s).tsx"
echo "// Test dummy file created at $(date)" > "$TEST_FILE"
echo "📄 Archivo de test creado: $TEST_FILE"

# Verificar que el archivo se creó
run_test "Archivo de test creado correctamente" "test -f '$TEST_FILE'"

# Agregar al staging
git add "$TEST_FILE" >/dev/null 2>&1

# Verificar que está staged
run_test_with_output "Archivo agregado a staging" "git status --porcelain" "A.*$TEST_FILE"

echo ""
echo "📋 FASE 3: Validación de Scripts"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Test git-claude (simulación parcial)
echo "🤖 Validando git-claude (estructura básica)..."
run_test_with_output "git-claude detecta proyecto Autamedica" "head -10 ./git-claude" "Autamedica"
run_test_with_output "git-claude tiene tipos de commit" "grep -E '✨|🐛|⚙️|📝|🧹|⚡|🧪' ./git-claude" "nova feature"

# Test git-flow-assistant (simulación parcial)
echo "🔄 Validando git-flow-assistant (estructura básica)..."
run_test_with_output "git-flow-assistant detecta cambios staged" "head -20 ./git-flow-assistant" "staged"
run_test_with_output "git-flow-assistant tiene flujo de ramas" "grep -E 'feature|develop|staging|main' ./git-flow-assistant" "branch"

echo ""
echo "📋 FASE 4: Test de Comandos Git Básicos"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Obtener rama actual para tests
CURRENT_BRANCH=$(git branch --show-current)
echo "📍 Rama actual detectada: $CURRENT_BRANCH"

# Test status
run_test_with_output "Git status muestra cambios" "git status --short" "$TEST_FILE"

# Test de commit (simulado - solo validar que el comando sería correcto)
COMMIT_MSG="🧪 tests: archivo dummy de prueba automatizada"
echo "💬 Mensaje de commit preparado: $COMMIT_MSG"

# Verificar formato de commit
if echo "$COMMIT_MSG" | grep -E '^(✨|🐛|⚙️|📝|🧹|⚡|🧪).*:.*'; then
    echo -e "🔍 Test $(($TESTS_TOTAL + 1)): Formato de commit válido... ${GREEN}✅ PASS${NC}"
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    TESTS_PASSED=$((TESTS_PASSED + 1))
else
    echo -e "🔍 Test $(($TESTS_TOTAL + 1)): Formato de commit válido... ${RED}❌ FAIL${NC}"
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    TESTS_FAILED=$((TESTS_FAILED + 1))
fi

echo ""
echo "📋 FASE 5: Limpieza de Test"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Hacer commit real del archivo de test para no dejarlo staged
git commit -m "$COMMIT_MSG" >/dev/null 2>&1
run_test "Commit de test ejecutado" "git log --oneline -1 | grep -q 'archivo dummy'"

# Opcional: limpiar archivo de test
read -p "🗑️  ¿Eliminar archivo de test? (Y/n): " cleanup
if [ "$cleanup" != "n" ] && [ "$cleanup" != "N" ]; then
    git rm "$TEST_FILE" >/dev/null 2>&1
    git commit -m "🧹 clean código: remover archivo de test automatizado" >/dev/null 2>&1
    echo "✅ Archivo de test eliminado y commit de limpieza realizado"
fi

echo ""
echo "📋 FASE 6: Validación de Configuración Cloudflare"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Verificar wrangler si está disponible
if command -v wrangler >/dev/null 2>&1; then
    run_test "Wrangler CLI disponible" "wrangler --version"

    # Test de proyectos (puede fallar si no está autenticado)
    if wrangler pages project list >/dev/null 2>&1; then
        run_test_with_output "Proyectos Cloudflare Pages configurados" "wrangler pages project list" "autamedica"
    else
        echo -e "🔍 Test $(($TESTS_TOTAL + 1)): Proyectos Cloudflare Pages... ${YELLOW}⚠️  SKIP (no autenticado)${NC}"
        TESTS_TOTAL=$((TESTS_TOTAL + 1))
    fi
else
    echo -e "🔍 Test $(($TESTS_TOTAL + 1)): Wrangler CLI... ${YELLOW}⚠️  SKIP (no instalado)${NC}"
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
fi

echo ""
echo "📊 RESUMEN DE TESTS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "📈 Total de tests: $TESTS_TOTAL"
echo -e "✅ Tests pasados: ${GREEN}$TESTS_PASSED${NC}"
echo -e "❌ Tests fallidos: ${RED}$TESTS_FAILED${NC}"

# Calcular porcentaje de éxito
if [ $TESTS_TOTAL -gt 0 ]; then
    SUCCESS_RATE=$(( (TESTS_PASSED * 100) / TESTS_TOTAL ))
    echo "📊 Tasa de éxito: $SUCCESS_RATE%"
fi

echo ""
if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "🎉 ${GREEN}¡TODOS LOS TESTS PASARON!${NC}"
    echo "✅ El sistema Git Workflow Autamedica está funcionando correctamente"
    echo ""
    echo "🚀 Próximos pasos:"
    echo "   • ./git-claude           (para commits individuales)"
    echo "   • ./git-flow-assistant   (para workflow completo)"
    echo "   • cat GIT_WORKFLOW_CHEATSHEET.md (referencia)"
    exit 0
else
    echo -e "⚠️  ${YELLOW}ALGUNOS TESTS FALLARON${NC}"
    echo "📋 Revisa los errores arriba y ejecuta debug manual:"
    echo "   • git status"
    echo "   • ./git-claude --help"
    echo "   • ./git-flow-assistant"
    exit 1
fi